
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006180  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e44  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007194  08007194  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08007194  08007194  00017194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800719c  0800719c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071a0  080071a0  000171a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080071a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004624  20000068  0800720c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000468c  0800720c  0002468c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ab7  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037b0  00000000  00000000  00037b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001600  00000000  00000000  0003b348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001166  00000000  00000000  0003c948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024cec  00000000  00000000  0003daae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b861  00000000  00000000  0006279a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcc0f  00000000  00000000  0007dffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005fdc  00000000  00000000  0015ac0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00160be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006338 	.word	0x08006338

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08006338 	.word	0x08006338

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b970 	b.w	800052c <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <__udivmoddi4+0xa6>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d965      	bls.n	8000346 <__udivmoddi4+0xe2>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	fa20 f202 	lsr.w	r2, r0, r2
 800028e:	4317      	orrs	r7, r2
 8000290:	409c      	lsls	r4, r3
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	fbb7 f1fe 	udiv	r1, r7, lr
 800029e:	0c22      	lsrs	r2, r4, #16
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a8:	fb01 f005 	mul.w	r0, r1, r5
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x62>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b8:	f080 811c 	bcs.w	80004f4 <__udivmoddi4+0x290>
 80002bc:	4290      	cmp	r0, r2
 80002be:	f240 8119 	bls.w	80004f4 <__udivmoddi4+0x290>
 80002c2:	3902      	subs	r1, #2
 80002c4:	4462      	add	r2, ip
 80002c6:	1a12      	subs	r2, r2, r0
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	fb00 f505 	mul.w	r5, r0, r5
 80002da:	42a5      	cmp	r5, r4
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x90>
 80002de:	eb1c 0404 	adds.w	r4, ip, r4
 80002e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x294>
 80002ea:	42a5      	cmp	r5, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x294>
 80002f0:	4464      	add	r4, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f8:	1b64      	subs	r4, r4, r5
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11e      	cbz	r6, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40dc      	lsrs	r4, r3
 8000300:	2300      	movs	r3, #0
 8000302:	e9c6 4300 	strd	r4, r3, [r6]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0xbc>
 800030e:	2e00      	cmp	r6, #0
 8000310:	f000 80ed 	beq.w	80004ee <__udivmoddi4+0x28a>
 8000314:	2100      	movs	r1, #0
 8000316:	e9c6 0500 	strd	r0, r5, [r6]
 800031a:	4608      	mov	r0, r1
 800031c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000320:	fab3 f183 	clz	r1, r3
 8000324:	2900      	cmp	r1, #0
 8000326:	d149      	bne.n	80003bc <__udivmoddi4+0x158>
 8000328:	42ab      	cmp	r3, r5
 800032a:	d302      	bcc.n	8000332 <__udivmoddi4+0xce>
 800032c:	4282      	cmp	r2, r0
 800032e:	f200 80f8 	bhi.w	8000522 <__udivmoddi4+0x2be>
 8000332:	1a84      	subs	r4, r0, r2
 8000334:	eb65 0203 	sbc.w	r2, r5, r3
 8000338:	2001      	movs	r0, #1
 800033a:	4617      	mov	r7, r2
 800033c:	2e00      	cmp	r6, #0
 800033e:	d0e2      	beq.n	8000306 <__udivmoddi4+0xa2>
 8000340:	e9c6 4700 	strd	r4, r7, [r6]
 8000344:	e7df      	b.n	8000306 <__udivmoddi4+0xa2>
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xe6>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f382 	clz	r3, r2
 800034e:	2b00      	cmp	r3, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x210>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035a:	fa1f fe8c 	uxth.w	lr, ip
 800035e:	2101      	movs	r1, #1
 8000360:	fbb2 f5f7 	udiv	r5, r2, r7
 8000364:	fb07 2015 	mls	r0, r7, r5, r2
 8000368:	0c22      	lsrs	r2, r4, #16
 800036a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036e:	fb0e f005 	mul.w	r0, lr, r5
 8000372:	4290      	cmp	r0, r2
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x124>
 8000376:	eb1c 0202 	adds.w	r2, ip, r2
 800037a:	f105 38ff 	add.w	r8, r5, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x122>
 8000380:	4290      	cmp	r0, r2
 8000382:	f200 80cb 	bhi.w	800051c <__udivmoddi4+0x2b8>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000390:	fb07 2210 	mls	r2, r7, r0, r2
 8000394:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000398:	fb0e fe00 	mul.w	lr, lr, r0
 800039c:	45a6      	cmp	lr, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	45a6      	cmp	lr, r4
 80003ac:	f200 80bb 	bhi.w	8000526 <__udivmoddi4+0x2c2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	eba4 040e 	sub.w	r4, r4, lr
 80003b6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ba:	e79f      	b.n	80002fc <__udivmoddi4+0x98>
 80003bc:	f1c1 0720 	rsb	r7, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ca:	fa05 f401 	lsl.w	r4, r5, r1
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	40fd      	lsrs	r5, r7
 80003d4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fbb5 f8f9 	udiv	r8, r5, r9
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	fb09 5518 	mls	r5, r9, r8, r5
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003ec:	fb08 f50e 	mul.w	r5, r8, lr
 80003f0:	42a5      	cmp	r5, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	fa00 f001 	lsl.w	r0, r0, r1
 80003fa:	d90b      	bls.n	8000414 <__udivmoddi4+0x1b0>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f108 3aff 	add.w	sl, r8, #4294967295
 8000404:	f080 8088 	bcs.w	8000518 <__udivmoddi4+0x2b4>
 8000408:	42a5      	cmp	r5, r4
 800040a:	f240 8085 	bls.w	8000518 <__udivmoddi4+0x2b4>
 800040e:	f1a8 0802 	sub.w	r8, r8, #2
 8000412:	4464      	add	r4, ip
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	b29d      	uxth	r5, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000424:	fb03 fe0e 	mul.w	lr, r3, lr
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1da>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f103 35ff 	add.w	r5, r3, #4294967295
 8000434:	d26c      	bcs.n	8000510 <__udivmoddi4+0x2ac>
 8000436:	45a6      	cmp	lr, r4
 8000438:	d96a      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800043a:	3b02      	subs	r3, #2
 800043c:	4464      	add	r4, ip
 800043e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000442:	fba3 9502 	umull	r9, r5, r3, r2
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	42ac      	cmp	r4, r5
 800044c:	46c8      	mov	r8, r9
 800044e:	46ae      	mov	lr, r5
 8000450:	d356      	bcc.n	8000500 <__udivmoddi4+0x29c>
 8000452:	d053      	beq.n	80004fc <__udivmoddi4+0x298>
 8000454:	b156      	cbz	r6, 800046c <__udivmoddi4+0x208>
 8000456:	ebb0 0208 	subs.w	r2, r0, r8
 800045a:	eb64 040e 	sbc.w	r4, r4, lr
 800045e:	fa04 f707 	lsl.w	r7, r4, r7
 8000462:	40ca      	lsrs	r2, r1
 8000464:	40cc      	lsrs	r4, r1
 8000466:	4317      	orrs	r7, r2
 8000468:	e9c6 7400 	strd	r7, r4, [r6]
 800046c:	4618      	mov	r0, r3
 800046e:	2100      	movs	r1, #0
 8000470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000474:	f1c3 0120 	rsb	r1, r3, #32
 8000478:	fa02 fc03 	lsl.w	ip, r2, r3
 800047c:	fa20 f201 	lsr.w	r2, r0, r1
 8000480:	fa25 f101 	lsr.w	r1, r5, r1
 8000484:	409d      	lsls	r5, r3
 8000486:	432a      	orrs	r2, r5
 8000488:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1510 	mls	r5, r7, r0, r1
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049e:	fb00 f50e 	mul.w	r5, r0, lr
 80004a2:	428d      	cmp	r5, r1
 80004a4:	fa04 f403 	lsl.w	r4, r4, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x258>
 80004aa:	eb1c 0101 	adds.w	r1, ip, r1
 80004ae:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b2:	d22f      	bcs.n	8000514 <__udivmoddi4+0x2b0>
 80004b4:	428d      	cmp	r5, r1
 80004b6:	d92d      	bls.n	8000514 <__udivmoddi4+0x2b0>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1b49      	subs	r1, r1, r5
 80004be:	b292      	uxth	r2, r2
 80004c0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c4:	fb07 1115 	mls	r1, r7, r5, r1
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	fb05 f10e 	mul.w	r1, r5, lr
 80004d0:	4291      	cmp	r1, r2
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x282>
 80004d4:	eb1c 0202 	adds.w	r2, ip, r2
 80004d8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004dc:	d216      	bcs.n	800050c <__udivmoddi4+0x2a8>
 80004de:	4291      	cmp	r1, r2
 80004e0:	d914      	bls.n	800050c <__udivmoddi4+0x2a8>
 80004e2:	3d02      	subs	r5, #2
 80004e4:	4462      	add	r2, ip
 80004e6:	1a52      	subs	r2, r2, r1
 80004e8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004ec:	e738      	b.n	8000360 <__udivmoddi4+0xfc>
 80004ee:	4631      	mov	r1, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xa2>
 80004f4:	4639      	mov	r1, r7
 80004f6:	e6e6      	b.n	80002c6 <__udivmoddi4+0x62>
 80004f8:	4610      	mov	r0, r2
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x90>
 80004fc:	4548      	cmp	r0, r9
 80004fe:	d2a9      	bcs.n	8000454 <__udivmoddi4+0x1f0>
 8000500:	ebb9 0802 	subs.w	r8, r9, r2
 8000504:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000508:	3b01      	subs	r3, #1
 800050a:	e7a3      	b.n	8000454 <__udivmoddi4+0x1f0>
 800050c:	4645      	mov	r5, r8
 800050e:	e7ea      	b.n	80004e6 <__udivmoddi4+0x282>
 8000510:	462b      	mov	r3, r5
 8000512:	e794      	b.n	800043e <__udivmoddi4+0x1da>
 8000514:	4640      	mov	r0, r8
 8000516:	e7d1      	b.n	80004bc <__udivmoddi4+0x258>
 8000518:	46d0      	mov	r8, sl
 800051a:	e77b      	b.n	8000414 <__udivmoddi4+0x1b0>
 800051c:	3d02      	subs	r5, #2
 800051e:	4462      	add	r2, ip
 8000520:	e732      	b.n	8000388 <__udivmoddi4+0x124>
 8000522:	4608      	mov	r0, r1
 8000524:	e70a      	b.n	800033c <__udivmoddi4+0xd8>
 8000526:	4464      	add	r4, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e742      	b.n	80003b2 <__udivmoddi4+0x14e>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
	int done=1;
 8000536:	2301      	movs	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
	while(done)
 800053a:	e19b      	b.n	8000874 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000542:	48b3      	ldr	r0, [pc, #716]	; (8000810 <Get_Key+0x2e0>)
 8000544:	f001 fd28 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000548:	2200      	movs	r2, #0
 800054a:	2110      	movs	r1, #16
 800054c:	48b0      	ldr	r0, [pc, #704]	; (8000810 <Get_Key+0x2e0>)
 800054e:	f001 fd23 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000552:	2200      	movs	r2, #0
 8000554:	2120      	movs	r1, #32
 8000556:	48ae      	ldr	r0, [pc, #696]	; (8000810 <Get_Key+0x2e0>)
 8000558:	f001 fd1e 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 800055c:	2200      	movs	r2, #0
 800055e:	2108      	movs	r1, #8
 8000560:	48ab      	ldr	r0, [pc, #684]	; (8000810 <Get_Key+0x2e0>)
 8000562:	f001 fd19 	bl	8001f98 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	48a9      	ldr	r0, [pc, #676]	; (8000810 <Get_Key+0x2e0>)
 800056a:	f001 fcfd 	bl	8001f68 <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00b      	beq.n	800058c <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000574:	bf00      	nop
 8000576:	2140      	movs	r1, #64	; 0x40
 8000578:	48a5      	ldr	r0, [pc, #660]	; (8000810 <Get_Key+0x2e0>)
 800057a:	f001 fcf5 	bl	8001f68 <HAL_GPIO_ReadPin>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d1f8      	bne.n	8000576 <Get_Key+0x46>
		key='1';
 8000584:	4ba3      	ldr	r3, [pc, #652]	; (8000814 <Get_Key+0x2e4>)
 8000586:	2231      	movs	r2, #49	; 0x31
 8000588:	701a      	strb	r2, [r3, #0]
		break;
 800058a:	e177      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	48a2      	ldr	r0, [pc, #648]	; (8000818 <Get_Key+0x2e8>)
 8000590:	f001 fcea 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00b      	beq.n	80005b2 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800059a:	bf00      	nop
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	489e      	ldr	r0, [pc, #632]	; (8000818 <Get_Key+0x2e8>)
 80005a0:	f001 fce2 	bl	8001f68 <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1f8      	bne.n	800059c <Get_Key+0x6c>
		key='4';
 80005aa:	4b9a      	ldr	r3, [pc, #616]	; (8000814 <Get_Key+0x2e4>)
 80005ac:	2234      	movs	r2, #52	; 0x34
 80005ae:	701a      	strb	r2, [r3, #0]
		break;
 80005b0:	e164      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80005b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b6:	4899      	ldr	r0, [pc, #612]	; (800081c <Get_Key+0x2ec>)
 80005b8:	f001 fcd6 	bl	8001f68 <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d00c      	beq.n	80005dc <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80005c2:	bf00      	nop
 80005c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c8:	4894      	ldr	r0, [pc, #592]	; (800081c <Get_Key+0x2ec>)
 80005ca:	f001 fccd 	bl	8001f68 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1f7      	bne.n	80005c4 <Get_Key+0x94>
		key='7';
 80005d4:	4b8f      	ldr	r3, [pc, #572]	; (8000814 <Get_Key+0x2e4>)
 80005d6:	2237      	movs	r2, #55	; 0x37
 80005d8:	701a      	strb	r2, [r3, #0]
		break;
 80005da:	e14f      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80005dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e0:	488e      	ldr	r0, [pc, #568]	; (800081c <Get_Key+0x2ec>)
 80005e2:	f001 fcc1 	bl	8001f68 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00c      	beq.n	8000606 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80005ec:	bf00      	nop
 80005ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f2:	488a      	ldr	r0, [pc, #552]	; (800081c <Get_Key+0x2ec>)
 80005f4:	f001 fcb8 	bl	8001f68 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1f7      	bne.n	80005ee <Get_Key+0xbe>
		key='*';
 80005fe:	4b85      	ldr	r3, [pc, #532]	; (8000814 <Get_Key+0x2e4>)
 8000600:	222a      	movs	r2, #42	; 0x2a
 8000602:	701a      	strb	r2, [r3, #0]
		break;
 8000604:	e13a      	b.n	800087c <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060c:	4880      	ldr	r0, [pc, #512]	; (8000810 <Get_Key+0x2e0>)
 800060e:	f001 fcc3 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8000612:	2201      	movs	r2, #1
 8000614:	2110      	movs	r1, #16
 8000616:	487e      	ldr	r0, [pc, #504]	; (8000810 <Get_Key+0x2e0>)
 8000618:	f001 fcbe 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800061c:	2200      	movs	r2, #0
 800061e:	2120      	movs	r1, #32
 8000620:	487b      	ldr	r0, [pc, #492]	; (8000810 <Get_Key+0x2e0>)
 8000622:	f001 fcb9 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000626:	2200      	movs	r2, #0
 8000628:	2108      	movs	r1, #8
 800062a:	4879      	ldr	r0, [pc, #484]	; (8000810 <Get_Key+0x2e0>)
 800062c:	f001 fcb4 	bl	8001f98 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	4877      	ldr	r0, [pc, #476]	; (8000810 <Get_Key+0x2e0>)
 8000634:	f001 fc98 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d00b      	beq.n	8000656 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 800063e:	bf00      	nop
 8000640:	2140      	movs	r1, #64	; 0x40
 8000642:	4873      	ldr	r0, [pc, #460]	; (8000810 <Get_Key+0x2e0>)
 8000644:	f001 fc90 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f8      	bne.n	8000640 <Get_Key+0x110>
		key='2';
 800064e:	4b71      	ldr	r3, [pc, #452]	; (8000814 <Get_Key+0x2e4>)
 8000650:	2232      	movs	r2, #50	; 0x32
 8000652:	701a      	strb	r2, [r3, #0]
		break;
 8000654:	e112      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	486f      	ldr	r0, [pc, #444]	; (8000818 <Get_Key+0x2e8>)
 800065a:	f001 fc85 	bl	8001f68 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00b      	beq.n	800067c <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000664:	bf00      	nop
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	486b      	ldr	r0, [pc, #428]	; (8000818 <Get_Key+0x2e8>)
 800066a:	f001 fc7d 	bl	8001f68 <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1f8      	bne.n	8000666 <Get_Key+0x136>
		key='5';
 8000674:	4b67      	ldr	r3, [pc, #412]	; (8000814 <Get_Key+0x2e4>)
 8000676:	2235      	movs	r2, #53	; 0x35
 8000678:	701a      	strb	r2, [r3, #0]
		break;
 800067a:	e0ff      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800067c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000680:	4866      	ldr	r0, [pc, #408]	; (800081c <Get_Key+0x2ec>)
 8000682:	f001 fc71 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00c      	beq.n	80006a6 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800068c:	bf00      	nop
 800068e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000692:	4862      	ldr	r0, [pc, #392]	; (800081c <Get_Key+0x2ec>)
 8000694:	f001 fc68 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1f7      	bne.n	800068e <Get_Key+0x15e>
		key='8';
 800069e:	4b5d      	ldr	r3, [pc, #372]	; (8000814 <Get_Key+0x2e4>)
 80006a0:	2238      	movs	r2, #56	; 0x38
 80006a2:	701a      	strb	r2, [r3, #0]
		break;
 80006a4:	e0ea      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80006a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006aa:	485c      	ldr	r0, [pc, #368]	; (800081c <Get_Key+0x2ec>)
 80006ac:	f001 fc5c 	bl	8001f68 <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d00c      	beq.n	80006d0 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80006b6:	bf00      	nop
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	4857      	ldr	r0, [pc, #348]	; (800081c <Get_Key+0x2ec>)
 80006be:	f001 fc53 	bl	8001f68 <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d1f7      	bne.n	80006b8 <Get_Key+0x188>
		key='0';
 80006c8:	4b52      	ldr	r3, [pc, #328]	; (8000814 <Get_Key+0x2e4>)
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	701a      	strb	r2, [r3, #0]
		break;
 80006ce:	e0d5      	b.n	800087c <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d6:	484e      	ldr	r0, [pc, #312]	; (8000810 <Get_Key+0x2e0>)
 80006d8:	f001 fc5e 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 80006dc:	2200      	movs	r2, #0
 80006de:	2110      	movs	r1, #16
 80006e0:	484b      	ldr	r0, [pc, #300]	; (8000810 <Get_Key+0x2e0>)
 80006e2:	f001 fc59 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 80006e6:	2201      	movs	r2, #1
 80006e8:	2120      	movs	r1, #32
 80006ea:	4849      	ldr	r0, [pc, #292]	; (8000810 <Get_Key+0x2e0>)
 80006ec:	f001 fc54 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 80006f0:	2200      	movs	r2, #0
 80006f2:	2108      	movs	r1, #8
 80006f4:	4846      	ldr	r0, [pc, #280]	; (8000810 <Get_Key+0x2e0>)
 80006f6:	f001 fc4f 	bl	8001f98 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006fa:	2140      	movs	r1, #64	; 0x40
 80006fc:	4844      	ldr	r0, [pc, #272]	; (8000810 <Get_Key+0x2e0>)
 80006fe:	f001 fc33 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d00b      	beq.n	8000720 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000708:	bf00      	nop
 800070a:	2140      	movs	r1, #64	; 0x40
 800070c:	4840      	ldr	r0, [pc, #256]	; (8000810 <Get_Key+0x2e0>)
 800070e:	f001 fc2b 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1f8      	bne.n	800070a <Get_Key+0x1da>
		key='3';
 8000718:	4b3e      	ldr	r3, [pc, #248]	; (8000814 <Get_Key+0x2e4>)
 800071a:	2233      	movs	r2, #51	; 0x33
 800071c:	701a      	strb	r2, [r3, #0]
		break;
 800071e:	e0ad      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	483d      	ldr	r0, [pc, #244]	; (8000818 <Get_Key+0x2e8>)
 8000724:	f001 fc20 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00b      	beq.n	8000746 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800072e:	bf00      	nop
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	4839      	ldr	r0, [pc, #228]	; (8000818 <Get_Key+0x2e8>)
 8000734:	f001 fc18 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1f8      	bne.n	8000730 <Get_Key+0x200>
		key='6';
 800073e:	4b35      	ldr	r3, [pc, #212]	; (8000814 <Get_Key+0x2e4>)
 8000740:	2236      	movs	r2, #54	; 0x36
 8000742:	701a      	strb	r2, [r3, #0]
		break;
 8000744:	e09a      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000746:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074a:	4834      	ldr	r0, [pc, #208]	; (800081c <Get_Key+0x2ec>)
 800074c:	f001 fc0c 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d00c      	beq.n	8000770 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000756:	bf00      	nop
 8000758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800075c:	482f      	ldr	r0, [pc, #188]	; (800081c <Get_Key+0x2ec>)
 800075e:	f001 fc03 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1f7      	bne.n	8000758 <Get_Key+0x228>
		key='9';
 8000768:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <Get_Key+0x2e4>)
 800076a:	2239      	movs	r2, #57	; 0x39
 800076c:	701a      	strb	r2, [r3, #0]
		break;
 800076e:	e085      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4829      	ldr	r0, [pc, #164]	; (800081c <Get_Key+0x2ec>)
 8000776:	f001 fbf7 	bl	8001f68 <HAL_GPIO_ReadPin>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00c      	beq.n	800079a <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000780:	bf00      	nop
 8000782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000786:	4825      	ldr	r0, [pc, #148]	; (800081c <Get_Key+0x2ec>)
 8000788:	f001 fbee 	bl	8001f68 <HAL_GPIO_ReadPin>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f7      	bne.n	8000782 <Get_Key+0x252>
		key='#';
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <Get_Key+0x2e4>)
 8000794:	2223      	movs	r2, #35	; 0x23
 8000796:	701a      	strb	r2, [r3, #0]
		break;
 8000798:	e070      	b.n	800087c <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a0:	481b      	ldr	r0, [pc, #108]	; (8000810 <Get_Key+0x2e0>)
 80007a2:	f001 fbf9 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80007a6:	2200      	movs	r2, #0
 80007a8:	2110      	movs	r1, #16
 80007aa:	4819      	ldr	r0, [pc, #100]	; (8000810 <Get_Key+0x2e0>)
 80007ac:	f001 fbf4 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80007b0:	2200      	movs	r2, #0
 80007b2:	2120      	movs	r1, #32
 80007b4:	4816      	ldr	r0, [pc, #88]	; (8000810 <Get_Key+0x2e0>)
 80007b6:	f001 fbef 	bl	8001f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 80007ba:	2201      	movs	r2, #1
 80007bc:	2108      	movs	r1, #8
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <Get_Key+0x2e0>)
 80007c0:	f001 fbea 	bl	8001f98 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <Get_Key+0x2e0>)
 80007c8:	f001 fbce 	bl	8001f68 <HAL_GPIO_ReadPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d00b      	beq.n	80007ea <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80007d2:	bf00      	nop
 80007d4:	2140      	movs	r1, #64	; 0x40
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <Get_Key+0x2e0>)
 80007d8:	f001 fbc6 	bl	8001f68 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1f8      	bne.n	80007d4 <Get_Key+0x2a4>
		key='A';
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <Get_Key+0x2e4>)
 80007e4:	2241      	movs	r2, #65	; 0x41
 80007e6:	701a      	strb	r2, [r3, #0]
		break;
 80007e8:	e048      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	480a      	ldr	r0, [pc, #40]	; (8000818 <Get_Key+0x2e8>)
 80007ee:	f001 fbbb 	bl	8001f68 <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d013      	beq.n	8000820 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007f8:	bf00      	nop
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <Get_Key+0x2e8>)
 80007fe:	f001 fbb3 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d1f8      	bne.n	80007fa <Get_Key+0x2ca>
		key='B';
 8000808:	4b02      	ldr	r3, [pc, #8]	; (8000814 <Get_Key+0x2e4>)
 800080a:	2242      	movs	r2, #66	; 0x42
 800080c:	701a      	strb	r2, [r3, #0]
		break;
 800080e:	e035      	b.n	800087c <Get_Key+0x34c>
 8000810:	40020400 	.word	0x40020400
 8000814:	20000084 	.word	0x20000084
 8000818:	40020800 	.word	0x40020800
 800081c:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	481a      	ldr	r0, [pc, #104]	; (8000890 <Get_Key+0x360>)
 8000826:	f001 fb9f 	bl	8001f68 <HAL_GPIO_ReadPin>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00c      	beq.n	800084a <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000830:	bf00      	nop
 8000832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000836:	4816      	ldr	r0, [pc, #88]	; (8000890 <Get_Key+0x360>)
 8000838:	f001 fb96 	bl	8001f68 <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1f7      	bne.n	8000832 <Get_Key+0x302>
		key='C';
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <Get_Key+0x364>)
 8000844:	2243      	movs	r2, #67	; 0x43
 8000846:	701a      	strb	r2, [r3, #0]
		break;
 8000848:	e018      	b.n	800087c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800084a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084e:	4810      	ldr	r0, [pc, #64]	; (8000890 <Get_Key+0x360>)
 8000850:	f001 fb8a 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00c      	beq.n	8000874 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800085a:	bf00      	nop
 800085c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <Get_Key+0x360>)
 8000862:	f001 fb81 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1f7      	bne.n	800085c <Get_Key+0x32c>
		key='D';
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <Get_Key+0x364>)
 800086e:	2244      	movs	r2, #68	; 0x44
 8000870:	701a      	strb	r2, [r3, #0]
		break;
 8000872:	e003      	b.n	800087c <Get_Key+0x34c>
	while(done)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	f47f ae60 	bne.w	800053c <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800087c:	2120      	movs	r1, #32
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <Get_Key+0x360>)
 8000880:	f001 fba3 	bl	8001fca <HAL_GPIO_TogglePin>
	return(key);
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <Get_Key+0x364>)
 8000886:	781b      	ldrb	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40020000 	.word	0x40020000
 8000894:	20000084 	.word	0x20000084

08000898 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80008a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <vApplicationGetIdleTaskMemory+0x30>)
 80008ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000088 	.word	0x20000088
 80008c8:	200000dc 	.word	0x200000dc

080008cc <replaceCharsWithAsterisks>:
/* USER CODE BEGIN 0 */
/**
  * @brief  The application entry point.
  * @retval int
  */
char* replaceCharsWithAsterisks(const char* input, int size) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
   // Allocate memory for the new array (+1 for the null terminator)
   char* result = (char*)malloc((size + 1) * sizeof(char));
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	3301      	adds	r3, #1
 80008da:	4618      	mov	r0, r3
 80008dc:	f005 fc16 	bl	800610c <malloc>
 80008e0:	4603      	mov	r3, r0
 80008e2:	60bb      	str	r3, [r7, #8]
   // Replace each char with an asterisk
   for (int i = 0; i < size; i++) {
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e007      	b.n	80008fa <replaceCharsWithAsterisks+0x2e>
       result[i] = '*';
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	68ba      	ldr	r2, [r7, #8]
 80008ee:	4413      	add	r3, r2
 80008f0:	222a      	movs	r2, #42	; 0x2a
 80008f2:	701a      	strb	r2, [r3, #0]
   for (int i = 0; i < size; i++) {
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	3301      	adds	r3, #1
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	429a      	cmp	r2, r3
 8000900:	dbf3      	blt.n	80008ea <replaceCharsWithAsterisks+0x1e>
   }
   // Add null terminator at the end
   result[size] = '\0';
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	68ba      	ldr	r2, [r7, #8]
 8000906:	4413      	add	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
   return result;
 800090c:	68bb      	ldr	r3, [r7, #8]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b5b0      	push	{r4, r5, r7, lr}
 800091a:	b09e      	sub	sp, #120	; 0x78
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091e:	f001 f847 	bl	80019b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000922:	f000 f88d 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000926:	f000 f951 	bl	8000bcc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800092a:	f000 f925 	bl	8000b78 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800092e:	f000 f8f5 	bl	8000b1c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
    SSD1306_Init();
 8000932:	f000 fbab 	bl	800108c <SSD1306_Init>
    SSD1306_GotoXY (0,0);
 8000936:	2100      	movs	r1, #0
 8000938:	2000      	movs	r0, #0
 800093a:	f000 fd11 	bl	8001360 <SSD1306_GotoXY>
    //SSD1306_Puts ("Voltage:", &Font_11x18, 1);
    SSD1306_Puts ("Enter Code:", &Font_11x18, 1);
 800093e:	2201      	movs	r2, #1
 8000940:	4934      	ldr	r1, [pc, #208]	; (8000a14 <main+0xfc>)
 8000942:	4835      	ldr	r0, [pc, #212]	; (8000a18 <main+0x100>)
 8000944:	f000 fda2 	bl	800148c <SSD1306_Puts>
    SSD1306_GotoXY (0, 30);
 8000948:	211e      	movs	r1, #30
 800094a:	2000      	movs	r0, #0
 800094c:	f000 fd08 	bl	8001360 <SSD1306_GotoXY>
    SSD1306_UpdateScreen();
 8000950:	f000 fc60 	bl	8001214 <SSD1306_UpdateScreen>
    SSD1306_UpdateScreen();
 8000954:	f000 fc5e 	bl	8001214 <SSD1306_UpdateScreen>
    HAL_Delay (500);
 8000958:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800095c:	f001 f86a 	bl	8001a34 <HAL_Delay>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000960:	2300      	movs	r3, #0
 8000962:	673b      	str	r3, [r7, #112]	; 0x70
 8000964:	2300      	movs	r3, #0
 8000966:	677b      	str	r3, [r7, #116]	; 0x74
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000968:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800096c:	2101      	movs	r1, #1
 800096e:	4618      	mov	r0, r3
 8000970:	f003 fd11 	bl	8004396 <osSemaphoreCreate>
 8000974:	4603      	mov	r3, r0
 8000976:	4a29      	ldr	r2, [pc, #164]	; (8000a1c <main+0x104>)
 8000978:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800097a:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <main+0x108>)
 800097c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000980:	461d      	mov	r5, r3
 8000982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000986:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800098a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800098e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f003 fc9e 	bl	80042d6 <osThreadCreate>
 800099a:	4603      	mov	r3, r0
 800099c:	4a21      	ldr	r2, [pc, #132]	; (8000a24 <main+0x10c>)
 800099e:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskPIR */
  osThreadDef(taskPIR, StartTaskPIR, osPriorityNormal, 0, 128);
 80009a0:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <main+0x110>)
 80009a2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80009a6:	461d      	mov	r5, r3
 80009a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskPIRHandle = osThreadCreate(osThread(taskPIR), NULL);
 80009b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f003 fc8b 	bl	80042d6 <osThreadCreate>
 80009c0:	4603      	mov	r3, r0
 80009c2:	4a1a      	ldr	r2, [pc, #104]	; (8000a2c <main+0x114>)
 80009c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskBuzzer */
  osThreadDef(taskBuzzer, StartTaskBuzzer, osPriorityNormal, 0, 128);
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <main+0x118>)
 80009c8:	f107 041c 	add.w	r4, r7, #28
 80009cc:	461d      	mov	r5, r3
 80009ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskBuzzerHandle = osThreadCreate(osThread(taskBuzzer), NULL);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f003 fc78 	bl	80042d6 <osThreadCreate>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <main+0x11c>)
 80009ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of PasswordTask */
  osThreadDef(PasswordTask, passwordSet, osPriorityNormal, 0, 128);
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <main+0x120>)
 80009ee:	463c      	mov	r4, r7
 80009f0:	461d      	mov	r5, r3
 80009f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PasswordTaskHandle = osThreadCreate(osThread(PasswordTask), NULL);
 80009fe:	463b      	mov	r3, r7
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f003 fc67 	bl	80042d6 <osThreadCreate>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4a0c      	ldr	r2, [pc, #48]	; (8000a3c <main+0x124>)
 8000a0c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a0e:	f003 fc5b 	bl	80042c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <main+0xfa>
 8000a14:	20000000 	.word	0x20000000
 8000a18:	08006350 	.word	0x08006350
 8000a1c:	20000388 	.word	0x20000388
 8000a20:	08006368 	.word	0x08006368
 8000a24:	20000378 	.word	0x20000378
 8000a28:	0800638c 	.word	0x0800638c
 8000a2c:	2000037c 	.word	0x2000037c
 8000a30:	080063b4 	.word	0x080063b4
 8000a34:	20000380 	.word	0x20000380
 8000a38:	080063e0 	.word	0x080063e0
 8000a3c:	20000384 	.word	0x20000384

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b094      	sub	sp, #80	; 0x50
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2234      	movs	r2, #52	; 0x34
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f005 fc10 	bl	8006274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 0308 	add.w	r3, r7, #8
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <SystemClock_Config+0xd4>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	4a29      	ldr	r2, [pc, #164]	; (8000b14 <SystemClock_Config+0xd4>)
 8000a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a72:	6413      	str	r3, [r2, #64]	; 0x40
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <SystemClock_Config+0xd4>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a80:	2300      	movs	r3, #0
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <SystemClock_Config+0xd8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a8c:	4a22      	ldr	r2, [pc, #136]	; (8000b18 <SystemClock_Config+0xd8>)
 8000a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <SystemClock_Config+0xd8>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa8:	2310      	movs	r3, #16
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aac:	2302      	movs	r3, #2
 8000aae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ab8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000abc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 fbde 	bl	8003290 <HAL_RCC_OscConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ada:	f000 fad1 	bl	8001080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	230f      	movs	r3, #15
 8000ae0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	2102      	movs	r1, #2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 f84c 	bl	8002b98 <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b06:	f000 fabb 	bl	8001080 <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3750      	adds	r7, #80	; 0x50
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40007000 	.word	0x40007000

08000b1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b22:	4a13      	ldr	r2, [pc, #76]	; (8000b70 <MX_I2C1_Init+0x54>)
 8000b24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b28:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <MX_I2C1_Init+0x58>)
 8000b2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b5a:	f001 fa51 	bl	8002000 <HAL_I2C_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b64:	f000 fa8c 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200002dc 	.word	0x200002dc
 8000b70:	40005400 	.word	0x40005400
 8000b74:	00061a80 	.word	0x00061a80

08000b78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <MX_USART2_UART_Init+0x50>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	f003 f8ae 	bl	8003d10 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bba:	f000 fa61 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000330 	.word	0x20000330
 8000bc8:	40004400 	.word	0x40004400

08000bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b49      	ldr	r3, [pc, #292]	; (8000d0c <MX_GPIO_Init+0x140>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a48      	ldr	r2, [pc, #288]	; (8000d0c <MX_GPIO_Init+0x140>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b46      	ldr	r3, [pc, #280]	; (8000d0c <MX_GPIO_Init+0x140>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b42      	ldr	r3, [pc, #264]	; (8000d0c <MX_GPIO_Init+0x140>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a41      	ldr	r2, [pc, #260]	; (8000d0c <MX_GPIO_Init+0x140>)
 8000c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b3f      	ldr	r3, [pc, #252]	; (8000d0c <MX_GPIO_Init+0x140>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	4b3b      	ldr	r3, [pc, #236]	; (8000d0c <MX_GPIO_Init+0x140>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a3a      	ldr	r2, [pc, #232]	; (8000d0c <MX_GPIO_Init+0x140>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <MX_GPIO_Init+0x140>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b34      	ldr	r3, [pc, #208]	; (8000d0c <MX_GPIO_Init+0x140>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a33      	ldr	r2, [pc, #204]	; (8000d0c <MX_GPIO_Init+0x140>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <MX_GPIO_Init+0x140>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	21a0      	movs	r1, #160	; 0xa0
 8000c56:	482e      	ldr	r0, [pc, #184]	; (8000d10 <MX_GPIO_Init+0x144>)
 8000c58:	f001 f99e 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000c62:	482c      	ldr	r0, [pc, #176]	; (8000d14 <MX_GPIO_Init+0x148>)
 8000c64:	f001 f998 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4827      	ldr	r0, [pc, #156]	; (8000d18 <MX_GPIO_Init+0x14c>)
 8000c7c:	f000 ffe0 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c80:	23a0      	movs	r3, #160	; 0xa0
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	481e      	ldr	r0, [pc, #120]	; (8000d10 <MX_GPIO_Init+0x144>)
 8000c98:	f000 ffd2 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000c9c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4817      	ldr	r0, [pc, #92]	; (8000d14 <MX_GPIO_Init+0x148>)
 8000cb6:	f000 ffc3 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4812      	ldr	r0, [pc, #72]	; (8000d18 <MX_GPIO_Init+0x14c>)
 8000cce:	f000 ffb7 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000cd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480a      	ldr	r0, [pc, #40]	; (8000d10 <MX_GPIO_Init+0x144>)
 8000ce8:	f000 ffaa 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000cec:	2340      	movs	r3, #64	; 0x40
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_GPIO_Init+0x148>)
 8000d00:	f000 ff9e 	bl	8001c40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000
 8000d14:	40020400 	.word	0x40020400
 8000d18:	40020800 	.word	0x40020800

08000d1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d24:	2001      	movs	r0, #1
 8000d26:	f003 fb22 	bl	800436e <osDelay>
 8000d2a:	e7fb      	b.n	8000d24 <StartDefaultTask+0x8>

08000d2c <StartTaskPIR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPIR */
void StartTaskPIR(void const * argument)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	 for(;;)
	  {

	    // Check if motion is detected
	    if (armed == true && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == GPIO_PIN_SET) {
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <StartTaskPIR+0x48>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d010      	beq.n	8000d5e <StartTaskPIR+0x32>
 8000d3c:	2104      	movs	r1, #4
 8000d3e:	480e      	ldr	r0, [pc, #56]	; (8000d78 <StartTaskPIR+0x4c>)
 8000d40:	f001 f912 	bl	8001f68 <HAL_GPIO_ReadPin>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d109      	bne.n	8000d5e <StartTaskPIR+0x32>

		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	480b      	ldr	r0, [pc, #44]	; (8000d7c <StartTaskPIR+0x50>)
 8000d50:	f001 f922 	bl	8001f98 <HAL_GPIO_WritePin>
		  osDelay(1000);
 8000d54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d58:	f003 fb09 	bl	800436e <osDelay>
 8000d5c:	e004      	b.n	8000d68 <StartTaskPIR+0x3c>
	      // Wait a bit before next read to debounce
	    } else {
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2180      	movs	r1, #128	; 0x80
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <StartTaskPIR+0x50>)
 8000d64:	f001 f918 	bl	8001f98 <HAL_GPIO_WritePin>
	    }
	    osDelay(1000);
 8000d68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d6c:	f003 faff 	bl	800436e <osDelay>
	    if (armed == true && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == GPIO_PIN_SET) {
 8000d70:	e7e0      	b.n	8000d34 <StartTaskPIR+0x8>
 8000d72:	bf00      	nop
 8000d74:	20000396 	.word	0x20000396
 8000d78:	40020800 	.word	0x40020800
 8000d7c:	40020000 	.word	0x40020000

08000d80 <StartTaskBuzzer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBuzzer */
void StartTaskBuzzer(void const * argument)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBuzzer */
 /* Infinite loop */
 for(;;)
 8000d88:	e7fe      	b.n	8000d88 <StartTaskBuzzer+0x8>
	...

08000d8c <passwordSet>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_passwordSet */
void passwordSet(void const * argument)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b090      	sub	sp, #64	; 0x40
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN passwordSet */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000d94:	2120      	movs	r1, #32
 8000d96:	48a7      	ldr	r0, [pc, #668]	; (8001034 <passwordSet+0x2a8>)
 8000d98:	f001 f917 	bl	8001fca <HAL_GPIO_TogglePin>
	  	  int counter = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  	  for(int i = 0; i <= 6; i++){
 8000da0:	2300      	movs	r3, #0
 8000da2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000da4:	e048      	b.n	8000e38 <passwordSet+0xac>
	  		  key = Get_Key();
 8000da6:	f7ff fbc3 	bl	8000530 <Get_Key>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	4ba2      	ldr	r3, [pc, #648]	; (8001038 <passwordSet+0x2ac>)
 8000db0:	701a      	strb	r2, [r3, #0]
	  		  counter++;
 8000db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000db4:	3301      	adds	r3, #1
 8000db6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  		  if(key == '#' && (strlen(hold) == 4 || strlen(hold) == 6)){
 8000db8:	4b9f      	ldr	r3, [pc, #636]	; (8001038 <passwordSet+0x2ac>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b23      	cmp	r3, #35	; 0x23
 8000dbe:	d122      	bne.n	8000e06 <passwordSet+0x7a>
 8000dc0:	489e      	ldr	r0, [pc, #632]	; (800103c <passwordSet+0x2b0>)
 8000dc2:	f7ff fa2f 	bl	8000224 <strlen>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d005      	beq.n	8000dd8 <passwordSet+0x4c>
 8000dcc:	489b      	ldr	r0, [pc, #620]	; (800103c <passwordSet+0x2b0>)
 8000dce:	f7ff fa29 	bl	8000224 <strlen>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b06      	cmp	r3, #6
 8000dd6:	d116      	bne.n	8000e06 <passwordSet+0x7a>
	  			  SSD1306_GotoXY (0, 30);
 8000dd8:	211e      	movs	r1, #30
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 fac0 	bl	8001360 <SSD1306_GotoXY>
	  			  SSD1306_UpdateScreen();
 8000de0:	f000 fa18 	bl	8001214 <SSD1306_UpdateScreen>
	  			  SSD1306_Puts ("ARME  ", &Font_11x18, 1);
 8000de4:	2201      	movs	r2, #1
 8000de6:	4996      	ldr	r1, [pc, #600]	; (8001040 <passwordSet+0x2b4>)
 8000de8:	4896      	ldr	r0, [pc, #600]	; (8001044 <passwordSet+0x2b8>)
 8000dea:	f000 fb4f 	bl	800148c <SSD1306_Puts>
	  			  SSD1306_UpdateScreen();
 8000dee:	f000 fa11 	bl	8001214 <SSD1306_UpdateScreen>
	  			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df8:	4893      	ldr	r0, [pc, #588]	; (8001048 <passwordSet+0x2bc>)
 8000dfa:	f001 f8cd 	bl	8001f98 <HAL_GPIO_WritePin>
	  			  //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);//red LED
	  			  armed = true;
 8000dfe:	4b93      	ldr	r3, [pc, #588]	; (800104c <passwordSet+0x2c0>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]


	  			  break;
 8000e04:	e01b      	b.n	8000e3e <passwordSet+0xb2>
	  //			  SSD1306_UpdateScreen();
	  //
	  //		  }
	  		  else{
	  			  //sprintf(hold, "%c", key);
	  			  strcat(hold, &key);
 8000e06:	498c      	ldr	r1, [pc, #560]	; (8001038 <passwordSet+0x2ac>)
 8000e08:	488c      	ldr	r0, [pc, #560]	; (800103c <passwordSet+0x2b0>)
 8000e0a:	f005 fa3b 	bl	8006284 <strcat>

	  			  SSD1306_GotoXY (0, 30);
 8000e0e:	211e      	movs	r1, #30
 8000e10:	2000      	movs	r0, #0
 8000e12:	f000 faa5 	bl	8001360 <SSD1306_GotoXY>
	  			  SSD1306_UpdateScreen();
 8000e16:	f000 f9fd 	bl	8001214 <SSD1306_UpdateScreen>

	  			  char* result = replaceCharsWithAsterisks(hold,counter);
 8000e1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000e1c:	4887      	ldr	r0, [pc, #540]	; (800103c <passwordSet+0x2b0>)
 8000e1e:	f7ff fd55 	bl	80008cc <replaceCharsWithAsterisks>
 8000e22:	62f8      	str	r0, [r7, #44]	; 0x2c
	  			  SSD1306_Puts (result, &Font_11x18, 1);
 8000e24:	2201      	movs	r2, #1
 8000e26:	4986      	ldr	r1, [pc, #536]	; (8001040 <passwordSet+0x2b4>)
 8000e28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e2a:	f000 fb2f 	bl	800148c <SSD1306_Puts>
	  			  SSD1306_UpdateScreen();
 8000e2e:	f000 f9f1 	bl	8001214 <SSD1306_UpdateScreen>
	  	  for(int i = 0; i <= 6; i++){
 8000e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e34:	3301      	adds	r3, #1
 8000e36:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	ddb3      	ble.n	8000da6 <passwordSet+0x1a>
	  		  }
	  	  }
	  	  key_2 = key;
 8000e3e:	4b7e      	ldr	r3, [pc, #504]	; (8001038 <passwordSet+0x2ac>)
 8000e40:	781a      	ldrb	r2, [r3, #0]
 8000e42:	4b83      	ldr	r3, [pc, #524]	; (8001050 <passwordSet+0x2c4>)
 8000e44:	701a      	strb	r2, [r3, #0]
	  	  //logMessage(&huart2, "This is a test message", key_2);
	  	  // NON-ARMÉ
	  	  while(1){

	  	  char temp[6];
	  		  if(armed == true){
 8000e46:	4b81      	ldr	r3, [pc, #516]	; (800104c <passwordSet+0x2c0>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 8086 	beq.w	8000f5c <passwordSet+0x1d0>
	  			  counter = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	63fb      	str	r3, [r7, #60]	; 0x3c
	  			  SSD1306_GotoXY (0, 30);
 8000e54:	211e      	movs	r1, #30
 8000e56:	2000      	movs	r0, #0
 8000e58:	f000 fa82 	bl	8001360 <SSD1306_GotoXY>
	  			  SSD1306_Clear();
 8000e5c:	f000 fb3b 	bl	80014d6 <SSD1306_Clear>
	  			  SSD1306_UpdateScreen();
 8000e60:	f000 f9d8 	bl	8001214 <SSD1306_UpdateScreen>
	  			  SSD1306_Puts ("ARME", &Font_11x18, 1);
 8000e64:	2201      	movs	r2, #1
 8000e66:	4976      	ldr	r1, [pc, #472]	; (8001040 <passwordSet+0x2b4>)
 8000e68:	487a      	ldr	r0, [pc, #488]	; (8001054 <passwordSet+0x2c8>)
 8000e6a:	f000 fb0f 	bl	800148c <SSD1306_Puts>
	  			  SSD1306_UpdateScreen();
 8000e6e:	f000 f9d1 	bl	8001214 <SSD1306_UpdateScreen>

	  			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000e72:	2120      	movs	r1, #32
 8000e74:	486f      	ldr	r0, [pc, #444]	; (8001034 <passwordSet+0x2a8>)
 8000e76:	f001 f8a8 	bl	8001fca <HAL_GPIO_TogglePin>


	  			  HAL_Delay(1500);
 8000e7a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000e7e:	f000 fdd9 	bl	8001a34 <HAL_Delay>

	  			  SSD1306_GotoXY (0, 30);
 8000e82:	211e      	movs	r1, #30
 8000e84:	2000      	movs	r0, #0
 8000e86:	f000 fa6b 	bl	8001360 <SSD1306_GotoXY>
	  			  SSD1306_Clear();
 8000e8a:	f000 fb24 	bl	80014d6 <SSD1306_Clear>
	  			  SSD1306_UpdateScreen();
 8000e8e:	f000 f9c1 	bl	8001214 <SSD1306_UpdateScreen>


	  			  memset(temp, '\0', sizeof(temp));
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	2206      	movs	r2, #6
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f005 f9ea 	bl	8006274 <memset>

	  			  for(int i = 0; i <= 6; i++){
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8000ea4:	e056      	b.n	8000f54 <passwordSet+0x1c8>
	  			  		  key = Get_Key();
 8000ea6:	f7ff fb43 	bl	8000530 <Get_Key>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b62      	ldr	r3, [pc, #392]	; (8001038 <passwordSet+0x2ac>)
 8000eb0:	701a      	strb	r2, [r3, #0]
	  			  		  counter++;
 8000eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  			  		  if(key == '#'){
 8000eb8:	4b5f      	ldr	r3, [pc, #380]	; (8001038 <passwordSet+0x2ac>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b23      	cmp	r3, #35	; 0x23
 8000ebe:	d10d      	bne.n	8000edc <passwordSet+0x150>
	  			  			  if(0 == strcmp(hold, temp))
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	485d      	ldr	r0, [pc, #372]	; (800103c <passwordSet+0x2b0>)
 8000ec8:	f7ff f9a2 	bl	8000210 <strcmp>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f040 80ab 	bne.w	800102a <passwordSet+0x29e>
	  			  			  armed = false;
 8000ed4:	4b5d      	ldr	r3, [pc, #372]	; (800104c <passwordSet+0x2c0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
	  			  			  break;
 8000eda:	e0a6      	b.n	800102a <passwordSet+0x29e>
	  			  		  }
	  					  else if (key == hold[i]){
 8000edc:	4a57      	ldr	r2, [pc, #348]	; (800103c <passwordSet+0x2b0>)
 8000ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781a      	ldrb	r2, [r3, #0]
 8000ee4:	4b54      	ldr	r3, [pc, #336]	; (8001038 <passwordSet+0x2ac>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d11b      	bne.n	8000f24 <passwordSet+0x198>
	  						  //sprintf(hold, "%c", key);
	  						  strcat(temp, &key);
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4951      	ldr	r1, [pc, #324]	; (8001038 <passwordSet+0x2ac>)
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f005 f9c6 	bl	8006284 <strcat>
	  						  armed = false;
 8000ef8:	4b54      	ldr	r3, [pc, #336]	; (800104c <passwordSet+0x2c0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
	  						  SSD1306_GotoXY (0, 30);
 8000efe:	211e      	movs	r1, #30
 8000f00:	2000      	movs	r0, #0
 8000f02:	f000 fa2d 	bl	8001360 <SSD1306_GotoXY>
	  						  SSD1306_UpdateScreen();
 8000f06:	f000 f985 	bl	8001214 <SSD1306_UpdateScreen>
	  						  char* result = replaceCharsWithAsterisks(hold,counter);
 8000f0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000f0c:	484b      	ldr	r0, [pc, #300]	; (800103c <passwordSet+0x2b0>)
 8000f0e:	f7ff fcdd 	bl	80008cc <replaceCharsWithAsterisks>
 8000f12:	6278      	str	r0, [r7, #36]	; 0x24
	  						  SSD1306_Puts (result, &Font_11x18, 1);
 8000f14:	2201      	movs	r2, #1
 8000f16:	494a      	ldr	r1, [pc, #296]	; (8001040 <passwordSet+0x2b4>)
 8000f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f1a:	f000 fab7 	bl	800148c <SSD1306_Puts>
	  						  //SSD1306_Puts (temp, &Font_11x18, 1);
	  						  SSD1306_UpdateScreen();
 8000f1e:	f000 f979 	bl	8001214 <SSD1306_UpdateScreen>
 8000f22:	e014      	b.n	8000f4e <passwordSet+0x1c2>

	  					  }
	  			  		else {
	  						  //sprintf(hold, "%c", key);
	  						  strcat(temp, &key);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4943      	ldr	r1, [pc, #268]	; (8001038 <passwordSet+0x2ac>)
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f005 f9aa 	bl	8006284 <strcat>

	  						  SSD1306_GotoXY (0, 30);
 8000f30:	211e      	movs	r1, #30
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 fa14 	bl	8001360 <SSD1306_GotoXY>
	  						  SSD1306_UpdateScreen();
 8000f38:	f000 f96c 	bl	8001214 <SSD1306_UpdateScreen>
	  						  SSD1306_Puts (temp, &Font_11x18, 1);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	2201      	movs	r2, #1
 8000f42:	493f      	ldr	r1, [pc, #252]	; (8001040 <passwordSet+0x2b4>)
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 faa1 	bl	800148c <SSD1306_Puts>
	  						  SSD1306_UpdateScreen();
 8000f4a:	f000 f963 	bl	8001214 <SSD1306_UpdateScreen>
	  			  for(int i = 0; i <= 6; i++){
 8000f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f50:	3301      	adds	r3, #1
 8000f52:	637b      	str	r3, [r7, #52]	; 0x34
 8000f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	dda5      	ble.n	8000ea6 <passwordSet+0x11a>
 8000f5a:	e774      	b.n	8000e46 <passwordSet+0xba>
	  //				  armed = false;
	  //			  }

	  		  }
	  		  else {
	  			  SSD1306_GotoXY (0, 30);
 8000f5c:	211e      	movs	r1, #30
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f000 f9fe 	bl	8001360 <SSD1306_GotoXY>
	  			  SSD1306_Clear();
 8000f64:	f000 fab7 	bl	80014d6 <SSD1306_Clear>
	  			  SSD1306_UpdateScreen();
 8000f68:	f000 f954 	bl	8001214 <SSD1306_UpdateScreen>
	  			  SSD1306_Puts ("NON-ARME", &Font_11x18, 1);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4934      	ldr	r1, [pc, #208]	; (8001040 <passwordSet+0x2b4>)
 8000f70:	4839      	ldr	r0, [pc, #228]	; (8001058 <passwordSet+0x2cc>)
 8000f72:	f000 fa8b 	bl	800148c <SSD1306_Puts>
	  			  SSD1306_UpdateScreen();
 8000f76:	f000 f94d 	bl	8001214 <SSD1306_UpdateScreen>
	  			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f80:	4831      	ldr	r0, [pc, #196]	; (8001048 <passwordSet+0x2bc>)
 8000f82:	f001 f809 	bl	8001f98 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f8c:	482e      	ldr	r0, [pc, #184]	; (8001048 <passwordSet+0x2bc>)
 8000f8e:	f001 f803 	bl	8001f98 <HAL_GPIO_WritePin>
	  			  //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);//red LED
	  			  //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);//green LED


	  			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000f92:	2120      	movs	r1, #32
 8000f94:	4827      	ldr	r0, [pc, #156]	; (8001034 <passwordSet+0x2a8>)
 8000f96:	f001 f818 	bl	8001fca <HAL_GPIO_TogglePin>

	  			  char temp[6];

	  			  HAL_Delay(1500);
 8000f9a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000f9e:	f000 fd49 	bl	8001a34 <HAL_Delay>

	  			  SSD1306_Clear();
 8000fa2:	f000 fa98 	bl	80014d6 <SSD1306_Clear>
	  			  SSD1306_UpdateScreen();
 8000fa6:	f000 f935 	bl	8001214 <SSD1306_UpdateScreen>

	  			    memset(temp, '\0', sizeof(temp));
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	2206      	movs	r2, #6
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f005 f95e 	bl	8006274 <memset>
	  			    char star[6];
	  			    char ja = '*';
 8000fb8:	232a      	movs	r3, #42	; 0x2a
 8000fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	  			  for(int i = 0; i <= 6; i++){
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
 8000fc2:	e02e      	b.n	8001022 <passwordSet+0x296>
	  					  key = Get_Key();
 8000fc4:	f7ff fab4 	bl	8000530 <Get_Key>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <passwordSet+0x2ac>)
 8000fce:	701a      	strb	r2, [r3, #0]

	  					  if(key == '#'){
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <passwordSet+0x2ac>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b23      	cmp	r3, #35	; 0x23
 8000fd6:	d10c      	bne.n	8000ff2 <passwordSet+0x266>
	  			  			  if(0 == strcmp(hold, temp))
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4817      	ldr	r0, [pc, #92]	; (800103c <passwordSet+0x2b0>)
 8000fe0:	f7ff f916 	bl	8000210 <strcmp>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d121      	bne.n	800102e <passwordSet+0x2a2>
	  						  armed = true;
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <passwordSet+0x2c0>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
	  						  break;
 8000ff0:	e01d      	b.n	800102e <passwordSet+0x2a2>
	  					  }
	  					  else{
	  						  //sprintf(hold, "%c", key);
	  						  strcat(temp, &key);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4910      	ldr	r1, [pc, #64]	; (8001038 <passwordSet+0x2ac>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f005 f943 	bl	8006284 <strcat>
	  						  SSD1306_GotoXY (0, 30);
 8000ffe:	211e      	movs	r1, #30
 8001000:	2000      	movs	r0, #0
 8001002:	f000 f9ad 	bl	8001360 <SSD1306_GotoXY>
	  						  SSD1306_UpdateScreen();
 8001006:	f000 f905 	bl	8001214 <SSD1306_UpdateScreen>

	  						  SSD1306_Puts (temp, &Font_11x18, 1);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	2201      	movs	r2, #1
 8001010:	490b      	ldr	r1, [pc, #44]	; (8001040 <passwordSet+0x2b4>)
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fa3a 	bl	800148c <SSD1306_Puts>
	  						  SSD1306_UpdateScreen();
 8001018:	f000 f8fc 	bl	8001214 <SSD1306_UpdateScreen>
	  			  for(int i = 0; i <= 6; i++){
 800101c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800101e:	3301      	adds	r3, #1
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
 8001022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001024:	2b06      	cmp	r3, #6
 8001026:	ddcd      	ble.n	8000fc4 <passwordSet+0x238>
 8001028:	e70d      	b.n	8000e46 <passwordSet+0xba>
	  			  			  break;
 800102a:	bf00      	nop
 800102c:	e70b      	b.n	8000e46 <passwordSet+0xba>
	  						  break;
 800102e:	bf00      	nop
	  	  while(1){
 8001030:	e709      	b.n	8000e46 <passwordSet+0xba>
 8001032:	bf00      	nop
 8001034:	40020000 	.word	0x40020000
 8001038:	20000084 	.word	0x20000084
 800103c:	20000390 	.word	0x20000390
 8001040:	20000000 	.word	0x20000000
 8001044:	080063fc 	.word	0x080063fc
 8001048:	40020400 	.word	0x40020400
 800104c:	20000396 	.word	0x20000396
 8001050:	2000038c 	.word	0x2000038c
 8001054:	08006404 	.word	0x08006404
 8001058:	0800640c 	.word	0x0800640c

0800105c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d101      	bne.n	8001072 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800106e:	f000 fcc1 	bl	80019f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40001000 	.word	0x40001000

08001080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001084:	b672      	cpsid	i
}
 8001086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001088:	e7fe      	b.n	8001088 <Error_Handler+0x8>
	...

0800108c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001092:	f000 fa29 	bl	80014e8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001096:	f644 6320 	movw	r3, #20000	; 0x4e20
 800109a:	2201      	movs	r2, #1
 800109c:	2178      	movs	r1, #120	; 0x78
 800109e:	485b      	ldr	r0, [pc, #364]	; (800120c <SSD1306_Init+0x180>)
 80010a0:	f001 f9f0 	bl	8002484 <HAL_I2C_IsDeviceReady>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e0a9      	b.n	8001202 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80010ae:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80010b2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010b4:	e002      	b.n	80010bc <SSD1306_Init+0x30>
		p--;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f9      	bne.n	80010b6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80010c2:	22ae      	movs	r2, #174	; 0xae
 80010c4:	2100      	movs	r1, #0
 80010c6:	2078      	movs	r0, #120	; 0x78
 80010c8:	f000 fa8a 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80010cc:	2220      	movs	r2, #32
 80010ce:	2100      	movs	r1, #0
 80010d0:	2078      	movs	r0, #120	; 0x78
 80010d2:	f000 fa85 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80010d6:	2210      	movs	r2, #16
 80010d8:	2100      	movs	r1, #0
 80010da:	2078      	movs	r0, #120	; 0x78
 80010dc:	f000 fa80 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010e0:	22b0      	movs	r2, #176	; 0xb0
 80010e2:	2100      	movs	r1, #0
 80010e4:	2078      	movs	r0, #120	; 0x78
 80010e6:	f000 fa7b 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80010ea:	22c8      	movs	r2, #200	; 0xc8
 80010ec:	2100      	movs	r1, #0
 80010ee:	2078      	movs	r0, #120	; 0x78
 80010f0:	f000 fa76 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2078      	movs	r0, #120	; 0x78
 80010fa:	f000 fa71 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80010fe:	2210      	movs	r2, #16
 8001100:	2100      	movs	r1, #0
 8001102:	2078      	movs	r0, #120	; 0x78
 8001104:	f000 fa6c 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001108:	2240      	movs	r2, #64	; 0x40
 800110a:	2100      	movs	r1, #0
 800110c:	2078      	movs	r0, #120	; 0x78
 800110e:	f000 fa67 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001112:	2281      	movs	r2, #129	; 0x81
 8001114:	2100      	movs	r1, #0
 8001116:	2078      	movs	r0, #120	; 0x78
 8001118:	f000 fa62 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800111c:	22ff      	movs	r2, #255	; 0xff
 800111e:	2100      	movs	r1, #0
 8001120:	2078      	movs	r0, #120	; 0x78
 8001122:	f000 fa5d 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001126:	22a1      	movs	r2, #161	; 0xa1
 8001128:	2100      	movs	r1, #0
 800112a:	2078      	movs	r0, #120	; 0x78
 800112c:	f000 fa58 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001130:	22a6      	movs	r2, #166	; 0xa6
 8001132:	2100      	movs	r1, #0
 8001134:	2078      	movs	r0, #120	; 0x78
 8001136:	f000 fa53 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800113a:	22a8      	movs	r2, #168	; 0xa8
 800113c:	2100      	movs	r1, #0
 800113e:	2078      	movs	r0, #120	; 0x78
 8001140:	f000 fa4e 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001144:	223f      	movs	r2, #63	; 0x3f
 8001146:	2100      	movs	r1, #0
 8001148:	2078      	movs	r0, #120	; 0x78
 800114a:	f000 fa49 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800114e:	22a4      	movs	r2, #164	; 0xa4
 8001150:	2100      	movs	r1, #0
 8001152:	2078      	movs	r0, #120	; 0x78
 8001154:	f000 fa44 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001158:	22d3      	movs	r2, #211	; 0xd3
 800115a:	2100      	movs	r1, #0
 800115c:	2078      	movs	r0, #120	; 0x78
 800115e:	f000 fa3f 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	2078      	movs	r0, #120	; 0x78
 8001168:	f000 fa3a 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800116c:	22d5      	movs	r2, #213	; 0xd5
 800116e:	2100      	movs	r1, #0
 8001170:	2078      	movs	r0, #120	; 0x78
 8001172:	f000 fa35 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001176:	22f0      	movs	r2, #240	; 0xf0
 8001178:	2100      	movs	r1, #0
 800117a:	2078      	movs	r0, #120	; 0x78
 800117c:	f000 fa30 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001180:	22d9      	movs	r2, #217	; 0xd9
 8001182:	2100      	movs	r1, #0
 8001184:	2078      	movs	r0, #120	; 0x78
 8001186:	f000 fa2b 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800118a:	2222      	movs	r2, #34	; 0x22
 800118c:	2100      	movs	r1, #0
 800118e:	2078      	movs	r0, #120	; 0x78
 8001190:	f000 fa26 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001194:	22da      	movs	r2, #218	; 0xda
 8001196:	2100      	movs	r1, #0
 8001198:	2078      	movs	r0, #120	; 0x78
 800119a:	f000 fa21 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800119e:	2212      	movs	r2, #18
 80011a0:	2100      	movs	r1, #0
 80011a2:	2078      	movs	r0, #120	; 0x78
 80011a4:	f000 fa1c 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80011a8:	22db      	movs	r2, #219	; 0xdb
 80011aa:	2100      	movs	r1, #0
 80011ac:	2078      	movs	r0, #120	; 0x78
 80011ae:	f000 fa17 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80011b2:	2220      	movs	r2, #32
 80011b4:	2100      	movs	r1, #0
 80011b6:	2078      	movs	r0, #120	; 0x78
 80011b8:	f000 fa12 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80011bc:	228d      	movs	r2, #141	; 0x8d
 80011be:	2100      	movs	r1, #0
 80011c0:	2078      	movs	r0, #120	; 0x78
 80011c2:	f000 fa0d 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80011c6:	2214      	movs	r2, #20
 80011c8:	2100      	movs	r1, #0
 80011ca:	2078      	movs	r0, #120	; 0x78
 80011cc:	f000 fa08 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80011d0:	22af      	movs	r2, #175	; 0xaf
 80011d2:	2100      	movs	r1, #0
 80011d4:	2078      	movs	r0, #120	; 0x78
 80011d6:	f000 fa03 	bl	80015e0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80011da:	222e      	movs	r2, #46	; 0x2e
 80011dc:	2100      	movs	r1, #0
 80011de:	2078      	movs	r0, #120	; 0x78
 80011e0:	f000 f9fe 	bl	80015e0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f000 f843 	bl	8001270 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80011ea:	f000 f813 	bl	8001214 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <SSD1306_Init+0x184>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <SSD1306_Init+0x184>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <SSD1306_Init+0x184>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001200:	2301      	movs	r3, #1
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200002dc 	.word	0x200002dc
 8001210:	20000798 	.word	0x20000798

08001214 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800121a:	2300      	movs	r3, #0
 800121c:	71fb      	strb	r3, [r7, #7]
 800121e:	e01d      	b.n	800125c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	3b50      	subs	r3, #80	; 0x50
 8001224:	b2db      	uxtb	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	2100      	movs	r1, #0
 800122a:	2078      	movs	r0, #120	; 0x78
 800122c:	f000 f9d8 	bl	80015e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	2078      	movs	r0, #120	; 0x78
 8001236:	f000 f9d3 	bl	80015e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800123a:	2210      	movs	r2, #16
 800123c:	2100      	movs	r1, #0
 800123e:	2078      	movs	r0, #120	; 0x78
 8001240:	f000 f9ce 	bl	80015e0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	01db      	lsls	r3, r3, #7
 8001248:	4a08      	ldr	r2, [pc, #32]	; (800126c <SSD1306_UpdateScreen+0x58>)
 800124a:	441a      	add	r2, r3
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	2140      	movs	r1, #64	; 0x40
 8001250:	2078      	movs	r0, #120	; 0x78
 8001252:	f000 f95f 	bl	8001514 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	3301      	adds	r3, #1
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2b07      	cmp	r3, #7
 8001260:	d9de      	bls.n	8001220 <SSD1306_UpdateScreen+0xc>
	}
}
 8001262:	bf00      	nop
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000398 	.word	0x20000398

08001270 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <SSD1306_Fill+0x14>
 8001280:	2300      	movs	r3, #0
 8001282:	e000      	b.n	8001286 <SSD1306_Fill+0x16>
 8001284:	23ff      	movs	r3, #255	; 0xff
 8001286:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800128a:	4619      	mov	r1, r3
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <SSD1306_Fill+0x2c>)
 800128e:	f004 fff1 	bl	8006274 <memset>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000398 	.word	0x20000398

080012a0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
 80012aa:	460b      	mov	r3, r1
 80012ac:	80bb      	strh	r3, [r7, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	70fb      	strb	r3, [r7, #3]
	if (
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	2b7f      	cmp	r3, #127	; 0x7f
 80012b6:	d848      	bhi.n	800134a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80012b8:	88bb      	ldrh	r3, [r7, #4]
 80012ba:	2b3f      	cmp	r3, #63	; 0x3f
 80012bc:	d845      	bhi.n	800134a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <SSD1306_DrawPixel+0xb8>)
 80012c0:	791b      	ldrb	r3, [r3, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d006      	beq.n	80012d4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bf0c      	ite	eq
 80012cc:	2301      	moveq	r3, #1
 80012ce:	2300      	movne	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d11a      	bne.n	8001310 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012da:	88fa      	ldrh	r2, [r7, #6]
 80012dc:	88bb      	ldrh	r3, [r7, #4]
 80012de:	08db      	lsrs	r3, r3, #3
 80012e0:	b298      	uxth	r0, r3
 80012e2:	4603      	mov	r3, r0
 80012e4:	01db      	lsls	r3, r3, #7
 80012e6:	4413      	add	r3, r2
 80012e8:	4a1c      	ldr	r2, [pc, #112]	; (800135c <SSD1306_DrawPixel+0xbc>)
 80012ea:	5cd3      	ldrb	r3, [r2, r3]
 80012ec:	b25a      	sxtb	r2, r3
 80012ee:	88bb      	ldrh	r3, [r7, #4]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	2101      	movs	r1, #1
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b259      	sxtb	r1, r3
 8001300:	88fa      	ldrh	r2, [r7, #6]
 8001302:	4603      	mov	r3, r0
 8001304:	01db      	lsls	r3, r3, #7
 8001306:	4413      	add	r3, r2
 8001308:	b2c9      	uxtb	r1, r1
 800130a:	4a14      	ldr	r2, [pc, #80]	; (800135c <SSD1306_DrawPixel+0xbc>)
 800130c:	54d1      	strb	r1, [r2, r3]
 800130e:	e01d      	b.n	800134c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001310:	88fa      	ldrh	r2, [r7, #6]
 8001312:	88bb      	ldrh	r3, [r7, #4]
 8001314:	08db      	lsrs	r3, r3, #3
 8001316:	b298      	uxth	r0, r3
 8001318:	4603      	mov	r3, r0
 800131a:	01db      	lsls	r3, r3, #7
 800131c:	4413      	add	r3, r2
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <SSD1306_DrawPixel+0xbc>)
 8001320:	5cd3      	ldrb	r3, [r2, r3]
 8001322:	b25a      	sxtb	r2, r3
 8001324:	88bb      	ldrh	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	2101      	movs	r1, #1
 800132c:	fa01 f303 	lsl.w	r3, r1, r3
 8001330:	b25b      	sxtb	r3, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	b25b      	sxtb	r3, r3
 8001336:	4013      	ands	r3, r2
 8001338:	b259      	sxtb	r1, r3
 800133a:	88fa      	ldrh	r2, [r7, #6]
 800133c:	4603      	mov	r3, r0
 800133e:	01db      	lsls	r3, r3, #7
 8001340:	4413      	add	r3, r2
 8001342:	b2c9      	uxtb	r1, r1
 8001344:	4a05      	ldr	r2, [pc, #20]	; (800135c <SSD1306_DrawPixel+0xbc>)
 8001346:	54d1      	strb	r1, [r2, r3]
 8001348:	e000      	b.n	800134c <SSD1306_DrawPixel+0xac>
		return;
 800134a:	bf00      	nop
	}
}
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000798 	.word	0x20000798
 800135c:	20000398 	.word	0x20000398

08001360 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	460a      	mov	r2, r1
 800136a:	80fb      	strh	r3, [r7, #6]
 800136c:	4613      	mov	r3, r2
 800136e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001370:	4a05      	ldr	r2, [pc, #20]	; (8001388 <SSD1306_GotoXY+0x28>)
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001376:	4a04      	ldr	r2, [pc, #16]	; (8001388 <SSD1306_GotoXY+0x28>)
 8001378:	88bb      	ldrh	r3, [r7, #4]
 800137a:	8053      	strh	r3, [r2, #2]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	20000798 	.word	0x20000798

0800138c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
 8001398:	4613      	mov	r3, r2
 800139a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800139c:	4b3a      	ldr	r3, [pc, #232]	; (8001488 <SSD1306_Putc+0xfc>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
	if (
 80013a8:	2b7f      	cmp	r3, #127	; 0x7f
 80013aa:	dc07      	bgt.n	80013bc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80013ac:	4b36      	ldr	r3, [pc, #216]	; (8001488 <SSD1306_Putc+0xfc>)
 80013ae:	885b      	ldrh	r3, [r3, #2]
 80013b0:	461a      	mov	r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	785b      	ldrb	r3, [r3, #1]
 80013b6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013b8:	2b3f      	cmp	r3, #63	; 0x3f
 80013ba:	dd01      	ble.n	80013c0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	e05e      	b.n	800147e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	e04b      	b.n	800145e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	3b20      	subs	r3, #32
 80013ce:	6839      	ldr	r1, [r7, #0]
 80013d0:	7849      	ldrb	r1, [r1, #1]
 80013d2:	fb01 f303 	mul.w	r3, r1, r3
 80013d6:	4619      	mov	r1, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	440b      	add	r3, r1
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4413      	add	r3, r2
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	e030      	b.n	800144c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d010      	beq.n	800141c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <SSD1306_Putc+0xfc>)
 80013fc:	881a      	ldrh	r2, [r3, #0]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	b29b      	uxth	r3, r3
 8001402:	4413      	add	r3, r2
 8001404:	b298      	uxth	r0, r3
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <SSD1306_Putc+0xfc>)
 8001408:	885a      	ldrh	r2, [r3, #2]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	b29b      	uxth	r3, r3
 800140e:	4413      	add	r3, r2
 8001410:	b29b      	uxth	r3, r3
 8001412:	79ba      	ldrb	r2, [r7, #6]
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff ff43 	bl	80012a0 <SSD1306_DrawPixel>
 800141a:	e014      	b.n	8001446 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <SSD1306_Putc+0xfc>)
 800141e:	881a      	ldrh	r2, [r3, #0]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	b29b      	uxth	r3, r3
 8001424:	4413      	add	r3, r2
 8001426:	b298      	uxth	r0, r3
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <SSD1306_Putc+0xfc>)
 800142a:	885a      	ldrh	r2, [r3, #2]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	b29b      	uxth	r3, r3
 8001430:	4413      	add	r3, r2
 8001432:	b299      	uxth	r1, r3
 8001434:	79bb      	ldrb	r3, [r7, #6]
 8001436:	2b00      	cmp	r3, #0
 8001438:	bf0c      	ite	eq
 800143a:	2301      	moveq	r3, #1
 800143c:	2300      	movne	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	f7ff ff2d 	bl	80012a0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	3301      	adds	r3, #1
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4293      	cmp	r3, r2
 8001456:	d3c8      	bcc.n	80013ea <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	3301      	adds	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	785b      	ldrb	r3, [r3, #1]
 8001462:	461a      	mov	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	4293      	cmp	r3, r2
 8001468:	d3ad      	bcc.n	80013c6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <SSD1306_Putc+0xfc>)
 800146c:	881a      	ldrh	r2, [r3, #0]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b29b      	uxth	r3, r3
 8001474:	4413      	add	r3, r2
 8001476:	b29a      	uxth	r2, r3
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <SSD1306_Putc+0xfc>)
 800147a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800147c:	79fb      	ldrb	r3, [r7, #7]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000798 	.word	0x20000798

0800148c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	4613      	mov	r3, r2
 8001498:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800149a:	e012      	b.n	80014c2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	79fa      	ldrb	r2, [r7, #7]
 80014a2:	68b9      	ldr	r1, [r7, #8]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff71 	bl	800138c <SSD1306_Putc>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d002      	beq.n	80014bc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	e008      	b.n	80014ce <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3301      	adds	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1e8      	bne.n	800149c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	781b      	ldrb	r3, [r3, #0]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff fec8 	bl	8001270 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80014e0:	f7ff fe98 	bl	8001214 <SSD1306_UpdateScreen>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <ssd1306_I2C_Init+0x28>)
 80014f0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014f2:	e002      	b.n	80014fa <ssd1306_I2C_Init+0x12>
		p--;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f9      	bne.n	80014f4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	0003d090 	.word	0x0003d090

08001514 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b0c7      	sub	sp, #284	; 0x11c
 8001518:	af02      	add	r7, sp, #8
 800151a:	4604      	mov	r4, r0
 800151c:	4608      	mov	r0, r1
 800151e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001522:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001526:	600a      	str	r2, [r1, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800152e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001532:	4622      	mov	r2, r4
 8001534:	701a      	strb	r2, [r3, #0]
 8001536:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800153a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800153e:	4602      	mov	r2, r0
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001546:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800154a:	460a      	mov	r2, r1
 800154c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800154e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001552:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001556:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800155a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800155e:	7812      	ldrb	r2, [r2, #0]
 8001560:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001562:	2300      	movs	r3, #0
 8001564:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001568:	e015      	b.n	8001596 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800156a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800156e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001572:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	441a      	add	r2, r3
 800157a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800157e:	3301      	adds	r3, #1
 8001580:	7811      	ldrb	r1, [r2, #0]
 8001582:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001586:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800158a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800158c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001590:	3301      	adds	r3, #1
 8001592:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001596:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800159a:	b29b      	uxth	r3, r3
 800159c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80015a0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80015a4:	8812      	ldrh	r2, [r2, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d8df      	bhi.n	800156a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80015aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015ae:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	b299      	uxth	r1, r3
 80015b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	3301      	adds	r3, #1
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	f107 020c 	add.w	r2, r7, #12
 80015c8:	200a      	movs	r0, #10
 80015ca:	9000      	str	r0, [sp, #0]
 80015cc:	4803      	ldr	r0, [pc, #12]	; (80015dc <ssd1306_I2C_WriteMulti+0xc8>)
 80015ce:	f000 fe5b 	bl	8002288 <HAL_I2C_Master_Transmit>
}
 80015d2:	bf00      	nop
 80015d4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	200002dc 	.word	0x200002dc

080015e0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
 80015ea:	460b      	mov	r3, r1
 80015ec:	71bb      	strb	r3, [r7, #6]
 80015ee:	4613      	mov	r3, r2
 80015f0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80015f2:	79bb      	ldrb	r3, [r7, #6]
 80015f4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80015f6:	797b      	ldrb	r3, [r7, #5]
 80015f8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	b299      	uxth	r1, r3
 80015fe:	f107 020c 	add.w	r2, r7, #12
 8001602:	230a      	movs	r3, #10
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2302      	movs	r3, #2
 8001608:	4803      	ldr	r0, [pc, #12]	; (8001618 <ssd1306_I2C_Write+0x38>)
 800160a:	f000 fe3d 	bl	8002288 <HAL_I2C_Master_Transmit>
}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200002dc 	.word	0x200002dc

0800161c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_MspInit+0x54>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	4a11      	ldr	r2, [pc, #68]	; (8001670 <HAL_MspInit+0x54>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001630:	6453      	str	r3, [r2, #68]	; 0x44
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_MspInit+0x54>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_MspInit+0x54>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <HAL_MspInit+0x54>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_MspInit+0x54>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	210f      	movs	r1, #15
 800165e:	f06f 0001 	mvn.w	r0, #1
 8001662:	f000 fac3 	bl	8001bec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800

08001674 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a19      	ldr	r2, [pc, #100]	; (80016f8 <HAL_I2C_MspInit+0x84>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d12c      	bne.n	80016f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_I2C_MspInit+0x88>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a17      	ldr	r2, [pc, #92]	; (80016fc <HAL_I2C_MspInit+0x88>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_I2C_MspInit+0x88>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80016b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b8:	2312      	movs	r3, #18
 80016ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016c4:	2304      	movs	r3, #4
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	480c      	ldr	r0, [pc, #48]	; (8001700 <HAL_I2C_MspInit+0x8c>)
 80016d0:	f000 fab6 	bl	8001c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_I2C_MspInit+0x88>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	4a07      	ldr	r2, [pc, #28]	; (80016fc <HAL_I2C_MspInit+0x88>)
 80016de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016e2:	6413      	str	r3, [r2, #64]	; 0x40
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_I2C_MspInit+0x88>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016f0:	bf00      	nop
 80016f2:	3728      	adds	r7, #40	; 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40005400 	.word	0x40005400
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020400 	.word	0x40020400

08001704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a19      	ldr	r2, [pc, #100]	; (8001788 <HAL_UART_MspInit+0x84>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d12b      	bne.n	800177e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_UART_MspInit+0x88>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a17      	ldr	r2, [pc, #92]	; (800178c <HAL_UART_MspInit+0x88>)
 8001730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_UART_MspInit+0x88>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_UART_MspInit+0x88>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a10      	ldr	r2, [pc, #64]	; (800178c <HAL_UART_MspInit+0x88>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_UART_MspInit+0x88>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800175e:	230c      	movs	r3, #12
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800176e:	2307      	movs	r3, #7
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <HAL_UART_MspInit+0x8c>)
 800177a:	f000 fa61 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	; 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40004400 	.word	0x40004400
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000

08001794 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08e      	sub	sp, #56	; 0x38
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4b33      	ldr	r3, [pc, #204]	; (8001878 <HAL_InitTick+0xe4>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	4a32      	ldr	r2, [pc, #200]	; (8001878 <HAL_InitTick+0xe4>)
 80017ae:	f043 0310 	orr.w	r3, r3, #16
 80017b2:	6413      	str	r3, [r2, #64]	; 0x40
 80017b4:	4b30      	ldr	r3, [pc, #192]	; (8001878 <HAL_InitTick+0xe4>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017c0:	f107 0210 	add.w	r2, r7, #16
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4611      	mov	r1, r2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f001 fafe 	bl	8002dcc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017da:	f001 facf 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 80017de:	6378      	str	r0, [r7, #52]	; 0x34
 80017e0:	e004      	b.n	80017ec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017e2:	f001 facb 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 80017e6:	4603      	mov	r3, r0
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ee:	4a23      	ldr	r2, [pc, #140]	; (800187c <HAL_InitTick+0xe8>)
 80017f0:	fba2 2303 	umull	r2, r3, r2, r3
 80017f4:	0c9b      	lsrs	r3, r3, #18
 80017f6:	3b01      	subs	r3, #1
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017fa:	4b21      	ldr	r3, [pc, #132]	; (8001880 <HAL_InitTick+0xec>)
 80017fc:	4a21      	ldr	r2, [pc, #132]	; (8001884 <HAL_InitTick+0xf0>)
 80017fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001800:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <HAL_InitTick+0xec>)
 8001802:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001806:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001808:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <HAL_InitTick+0xec>)
 800180a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <HAL_InitTick+0xec>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <HAL_InitTick+0xec>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_InitTick+0xec>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001820:	4817      	ldr	r0, [pc, #92]	; (8001880 <HAL_InitTick+0xec>)
 8001822:	f001 ffd3 	bl	80037cc <HAL_TIM_Base_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800182c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001830:	2b00      	cmp	r3, #0
 8001832:	d11b      	bne.n	800186c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001834:	4812      	ldr	r0, [pc, #72]	; (8001880 <HAL_InitTick+0xec>)
 8001836:	f002 f823 	bl	8003880 <HAL_TIM_Base_Start_IT>
 800183a:	4603      	mov	r3, r0
 800183c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001840:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001844:	2b00      	cmp	r3, #0
 8001846:	d111      	bne.n	800186c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001848:	2036      	movs	r0, #54	; 0x36
 800184a:	f000 f9eb 	bl	8001c24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b0f      	cmp	r3, #15
 8001852:	d808      	bhi.n	8001866 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001854:	2200      	movs	r2, #0
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	2036      	movs	r0, #54	; 0x36
 800185a:	f000 f9c7 	bl	8001bec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_InitTick+0xf4>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e002      	b.n	800186c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800186c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001870:	4618      	mov	r0, r3
 8001872:	3738      	adds	r7, #56	; 0x38
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800
 800187c:	431bde83 	.word	0x431bde83
 8001880:	200007a0 	.word	0x200007a0
 8001884:	40001000 	.word	0x40001000
 8001888:	2000000c 	.word	0x2000000c

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001890:	e7fe      	b.n	8001890 <NMI_Handler+0x4>

08001892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <MemManage_Handler+0x4>

0800189e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <BusFault_Handler+0x4>

080018a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <UsageFault_Handler+0x4>

080018aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <TIM6_DAC_IRQHandler+0x10>)
 80018be:	f002 f84f 	bl	8003960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200007a0 	.word	0x200007a0

080018cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <_sbrk+0x5c>)
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <_sbrk+0x60>)
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <_sbrk+0x64>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <_sbrk+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018fc:	f004 fce2 	bl	80062c4 <__errno>
 8001900:	4603      	mov	r3, r0
 8001902:	220c      	movs	r2, #12
 8001904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	e009      	b.n	8001920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <_sbrk+0x64>)
 800191c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20020000 	.word	0x20020000
 800192c:	00000400 	.word	0x00000400
 8001930:	200007e8 	.word	0x200007e8
 8001934:	20004690 	.word	0x20004690

08001938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <SystemInit+0x20>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <SystemInit+0x20>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800195c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001994 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001960:	f7ff ffea 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001964:	480c      	ldr	r0, [pc, #48]	; (8001998 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001966:	490d      	ldr	r1, [pc, #52]	; (800199c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800196c:	e002      	b.n	8001974 <LoopCopyDataInit>

0800196e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001972:	3304      	adds	r3, #4

08001974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001978:	d3f9      	bcc.n	800196e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800197c:	4c0a      	ldr	r4, [pc, #40]	; (80019a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001980:	e001      	b.n	8001986 <LoopFillZerobss>

08001982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001984:	3204      	adds	r2, #4

08001986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001988:	d3fb      	bcc.n	8001982 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800198a:	f004 fca1 	bl	80062d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800198e:	f7fe ffc3 	bl	8000918 <main>
  bx  lr    
 8001992:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001994:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800199c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80019a0:	080071a4 	.word	0x080071a4
  ldr r2, =_sbss
 80019a4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019a8:	2000468c 	.word	0x2000468c

080019ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019ac:	e7fe      	b.n	80019ac <ADC_IRQHandler>
	...

080019b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_Init+0x40>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <HAL_Init+0x40>)
 80019ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_Init+0x40>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <HAL_Init+0x40>)
 80019c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <HAL_Init+0x40>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a07      	ldr	r2, [pc, #28]	; (80019f0 <HAL_Init+0x40>)
 80019d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d8:	2003      	movs	r0, #3
 80019da:	f000 f8fc 	bl	8001bd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019de:	200f      	movs	r0, #15
 80019e0:	f7ff fed8 	bl	8001794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e4:	f7ff fe1a 	bl	800161c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023c00 	.word	0x40023c00

080019f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_IncTick+0x20>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x24>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_IncTick+0x24>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000010 	.word	0x20000010
 8001a18:	200007ec 	.word	0x200007ec

08001a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_GetTick+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	200007ec 	.word	0x200007ec

08001a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff ffee 	bl	8001a1c <HAL_GetTick>
 8001a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d005      	beq.n	8001a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_Delay+0x44>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a5a:	bf00      	nop
 8001a5c:	f7ff ffde 	bl	8001a1c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f7      	bhi.n	8001a5c <HAL_Delay+0x28>
  {
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000010 	.word	0x20000010

08001a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aae:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	60d3      	str	r3, [r2, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <__NVIC_GetPriorityGrouping+0x18>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	f003 0307 	and.w	r3, r3, #7
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	db0b      	blt.n	8001b0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	f003 021f 	and.w	r2, r3, #31
 8001af8:	4907      	ldr	r1, [pc, #28]	; (8001b18 <__NVIC_EnableIRQ+0x38>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	2001      	movs	r0, #1
 8001b02:	fa00 f202 	lsl.w	r2, r0, r2
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000e100 	.word	0xe000e100

08001b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	db0a      	blt.n	8001b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	490c      	ldr	r1, [pc, #48]	; (8001b68 <__NVIC_SetPriority+0x4c>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	440b      	add	r3, r1
 8001b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b44:	e00a      	b.n	8001b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4908      	ldr	r1, [pc, #32]	; (8001b6c <__NVIC_SetPriority+0x50>)
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	3b04      	subs	r3, #4
 8001b54:	0112      	lsls	r2, r2, #4
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	761a      	strb	r2, [r3, #24]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000e100 	.word	0xe000e100
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f1c3 0307 	rsb	r3, r3, #7
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	bf28      	it	cs
 8001b8e:	2304      	movcs	r3, #4
 8001b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3304      	adds	r3, #4
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d902      	bls.n	8001ba0 <NVIC_EncodePriority+0x30>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3b03      	subs	r3, #3
 8001b9e:	e000      	b.n	8001ba2 <NVIC_EncodePriority+0x32>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	43d9      	mvns	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	4313      	orrs	r3, r2
         );
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3724      	adds	r7, #36	; 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ff4c 	bl	8001a7c <__NVIC_SetPriorityGrouping>
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bfe:	f7ff ff61 	bl	8001ac4 <__NVIC_GetPriorityGrouping>
 8001c02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	68b9      	ldr	r1, [r7, #8]
 8001c08:	6978      	ldr	r0, [r7, #20]
 8001c0a:	f7ff ffb1 	bl	8001b70 <NVIC_EncodePriority>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff80 	bl	8001b1c <__NVIC_SetPriority>
}
 8001c1c:	bf00      	nop
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ff54 	bl	8001ae0 <__NVIC_EnableIRQ>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	e165      	b.n	8001f28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	f040 8154 	bne.w	8001f22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d005      	beq.n	8001c92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d130      	bne.n	8001cf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 0201 	and.w	r2, r3, #1
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d017      	beq.n	8001d30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d123      	bne.n	8001d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	08da      	lsrs	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3208      	adds	r2, #8
 8001d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	220f      	movs	r2, #15
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	08da      	lsrs	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3208      	adds	r2, #8
 8001d7e:	69b9      	ldr	r1, [r7, #24]
 8001d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	2203      	movs	r2, #3
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0203 	and.w	r2, r3, #3
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80ae 	beq.w	8001f22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b5d      	ldr	r3, [pc, #372]	; (8001f40 <HAL_GPIO_Init+0x300>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a5c      	ldr	r2, [pc, #368]	; (8001f40 <HAL_GPIO_Init+0x300>)
 8001dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b5a      	ldr	r3, [pc, #360]	; (8001f40 <HAL_GPIO_Init+0x300>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001de2:	4a58      	ldr	r2, [pc, #352]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	3302      	adds	r3, #2
 8001dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	220f      	movs	r2, #15
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4f      	ldr	r2, [pc, #316]	; (8001f48 <HAL_GPIO_Init+0x308>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d025      	beq.n	8001e5a <HAL_GPIO_Init+0x21a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4e      	ldr	r2, [pc, #312]	; (8001f4c <HAL_GPIO_Init+0x30c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d01f      	beq.n	8001e56 <HAL_GPIO_Init+0x216>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4d      	ldr	r2, [pc, #308]	; (8001f50 <HAL_GPIO_Init+0x310>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d019      	beq.n	8001e52 <HAL_GPIO_Init+0x212>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4c      	ldr	r2, [pc, #304]	; (8001f54 <HAL_GPIO_Init+0x314>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d013      	beq.n	8001e4e <HAL_GPIO_Init+0x20e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4b      	ldr	r2, [pc, #300]	; (8001f58 <HAL_GPIO_Init+0x318>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00d      	beq.n	8001e4a <HAL_GPIO_Init+0x20a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4a      	ldr	r2, [pc, #296]	; (8001f5c <HAL_GPIO_Init+0x31c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d007      	beq.n	8001e46 <HAL_GPIO_Init+0x206>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a49      	ldr	r2, [pc, #292]	; (8001f60 <HAL_GPIO_Init+0x320>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <HAL_GPIO_Init+0x202>
 8001e3e:	2306      	movs	r3, #6
 8001e40:	e00c      	b.n	8001e5c <HAL_GPIO_Init+0x21c>
 8001e42:	2307      	movs	r3, #7
 8001e44:	e00a      	b.n	8001e5c <HAL_GPIO_Init+0x21c>
 8001e46:	2305      	movs	r3, #5
 8001e48:	e008      	b.n	8001e5c <HAL_GPIO_Init+0x21c>
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	e006      	b.n	8001e5c <HAL_GPIO_Init+0x21c>
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e004      	b.n	8001e5c <HAL_GPIO_Init+0x21c>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e002      	b.n	8001e5c <HAL_GPIO_Init+0x21c>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <HAL_GPIO_Init+0x21c>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	f002 0203 	and.w	r2, r2, #3
 8001e62:	0092      	lsls	r2, r2, #2
 8001e64:	4093      	lsls	r3, r2
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e6c:	4935      	ldr	r1, [pc, #212]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	3302      	adds	r3, #2
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e7a:	4b3a      	ldr	r3, [pc, #232]	; (8001f64 <HAL_GPIO_Init+0x324>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e9e:	4a31      	ldr	r2, [pc, #196]	; (8001f64 <HAL_GPIO_Init+0x324>)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ea4:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <HAL_GPIO_Init+0x324>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ec8:	4a26      	ldr	r2, [pc, #152]	; (8001f64 <HAL_GPIO_Init+0x324>)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <HAL_GPIO_Init+0x324>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <HAL_GPIO_Init+0x324>)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_GPIO_Init+0x324>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f1c:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <HAL_GPIO_Init+0x324>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3301      	adds	r3, #1
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	2b0f      	cmp	r3, #15
 8001f2c:	f67f ae96 	bls.w	8001c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	3724      	adds	r7, #36	; 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40013800 	.word	0x40013800
 8001f48:	40020000 	.word	0x40020000
 8001f4c:	40020400 	.word	0x40020400
 8001f50:	40020800 	.word	0x40020800
 8001f54:	40020c00 	.word	0x40020c00
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40021400 	.word	0x40021400
 8001f60:	40021800 	.word	0x40021800
 8001f64:	40013c00 	.word	0x40013c00

08001f68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	887b      	ldrh	r3, [r7, #2]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	e001      	b.n	8001f8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	807b      	strh	r3, [r7, #2]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa8:	787b      	ldrb	r3, [r7, #1]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fb4:	e003      	b.n	8001fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fb6:	887b      	ldrh	r3, [r7, #2]
 8001fb8:	041a      	lsls	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	619a      	str	r2, [r3, #24]
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fdc:	887a      	ldrh	r2, [r7, #2]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	041a      	lsls	r2, r3, #16
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	887b      	ldrh	r3, [r7, #2]
 8001fea:	400b      	ands	r3, r1
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	619a      	str	r2, [r3, #24]
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e12b      	b.n	800226a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff fb24 	bl	8001674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2224      	movs	r2, #36	; 0x24
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002052:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002062:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002064:	f000 fe8a 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 8002068:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4a81      	ldr	r2, [pc, #516]	; (8002274 <HAL_I2C_Init+0x274>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d807      	bhi.n	8002084 <HAL_I2C_Init+0x84>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4a80      	ldr	r2, [pc, #512]	; (8002278 <HAL_I2C_Init+0x278>)
 8002078:	4293      	cmp	r3, r2
 800207a:	bf94      	ite	ls
 800207c:	2301      	movls	r3, #1
 800207e:	2300      	movhi	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	e006      	b.n	8002092 <HAL_I2C_Init+0x92>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4a7d      	ldr	r2, [pc, #500]	; (800227c <HAL_I2C_Init+0x27c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	bf94      	ite	ls
 800208c:	2301      	movls	r3, #1
 800208e:	2300      	movhi	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e0e7      	b.n	800226a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4a78      	ldr	r2, [pc, #480]	; (8002280 <HAL_I2C_Init+0x280>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	0c9b      	lsrs	r3, r3, #18
 80020a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a6a      	ldr	r2, [pc, #424]	; (8002274 <HAL_I2C_Init+0x274>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d802      	bhi.n	80020d4 <HAL_I2C_Init+0xd4>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	3301      	adds	r3, #1
 80020d2:	e009      	b.n	80020e8 <HAL_I2C_Init+0xe8>
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	4a69      	ldr	r2, [pc, #420]	; (8002284 <HAL_I2C_Init+0x284>)
 80020e0:	fba2 2303 	umull	r2, r3, r2, r3
 80020e4:	099b      	lsrs	r3, r3, #6
 80020e6:	3301      	adds	r3, #1
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	430b      	orrs	r3, r1
 80020ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	495c      	ldr	r1, [pc, #368]	; (8002274 <HAL_I2C_Init+0x274>)
 8002104:	428b      	cmp	r3, r1
 8002106:	d819      	bhi.n	800213c <HAL_I2C_Init+0x13c>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1e59      	subs	r1, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	fbb1 f3f3 	udiv	r3, r1, r3
 8002116:	1c59      	adds	r1, r3, #1
 8002118:	f640 73fc 	movw	r3, #4092	; 0xffc
 800211c:	400b      	ands	r3, r1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_I2C_Init+0x138>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1e59      	subs	r1, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002130:	3301      	adds	r3, #1
 8002132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002136:	e051      	b.n	80021dc <HAL_I2C_Init+0x1dc>
 8002138:	2304      	movs	r3, #4
 800213a:	e04f      	b.n	80021dc <HAL_I2C_Init+0x1dc>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d111      	bne.n	8002168 <HAL_I2C_Init+0x168>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1e58      	subs	r0, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	440b      	add	r3, r1
 8002152:	fbb0 f3f3 	udiv	r3, r0, r3
 8002156:	3301      	adds	r3, #1
 8002158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	e012      	b.n	800218e <HAL_I2C_Init+0x18e>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	1e58      	subs	r0, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6859      	ldr	r1, [r3, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	0099      	lsls	r1, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	fbb0 f3f3 	udiv	r3, r0, r3
 800217e:	3301      	adds	r3, #1
 8002180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_I2C_Init+0x196>
 8002192:	2301      	movs	r3, #1
 8002194:	e022      	b.n	80021dc <HAL_I2C_Init+0x1dc>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10e      	bne.n	80021bc <HAL_I2C_Init+0x1bc>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1e58      	subs	r0, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6859      	ldr	r1, [r3, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	440b      	add	r3, r1
 80021ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ba:	e00f      	b.n	80021dc <HAL_I2C_Init+0x1dc>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1e58      	subs	r0, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6859      	ldr	r1, [r3, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	0099      	lsls	r1, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d2:	3301      	adds	r3, #1
 80021d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	6809      	ldr	r1, [r1, #0]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69da      	ldr	r2, [r3, #28]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800220a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6911      	ldr	r1, [r2, #16]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68d2      	ldr	r2, [r2, #12]
 8002216:	4311      	orrs	r1, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	430b      	orrs	r3, r1
 800221e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	000186a0 	.word	0x000186a0
 8002278:	001e847f 	.word	0x001e847f
 800227c:	003d08ff 	.word	0x003d08ff
 8002280:	431bde83 	.word	0x431bde83
 8002284:	10624dd3 	.word	0x10624dd3

08002288 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	461a      	mov	r2, r3
 8002294:	460b      	mov	r3, r1
 8002296:	817b      	strh	r3, [r7, #10]
 8002298:	4613      	mov	r3, r2
 800229a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff fbbe 	bl	8001a1c <HAL_GetTick>
 80022a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	f040 80e0 	bne.w	8002470 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	2319      	movs	r3, #25
 80022b6:	2201      	movs	r2, #1
 80022b8:	4970      	ldr	r1, [pc, #448]	; (800247c <HAL_I2C_Master_Transmit+0x1f4>)
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 fa92 	bl	80027e4 <I2C_WaitOnFlagUntilTimeout>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022c6:	2302      	movs	r3, #2
 80022c8:	e0d3      	b.n	8002472 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_I2C_Master_Transmit+0x50>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e0cc      	b.n	8002472 <HAL_I2C_Master_Transmit+0x1ea>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d007      	beq.n	80022fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 0201 	orr.w	r2, r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800230c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2221      	movs	r2, #33	; 0x21
 8002312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2210      	movs	r2, #16
 800231a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	893a      	ldrh	r2, [r7, #8]
 800232e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4a50      	ldr	r2, [pc, #320]	; (8002480 <HAL_I2C_Master_Transmit+0x1f8>)
 800233e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002340:	8979      	ldrh	r1, [r7, #10]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	6a3a      	ldr	r2, [r7, #32]
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f9ca 	bl	80026e0 <I2C_MasterRequestWrite>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e08d      	b.n	8002472 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800236c:	e066      	b.n	800243c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	6a39      	ldr	r1, [r7, #32]
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 fb50 	bl	8002a18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00d      	beq.n	800239a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	2b04      	cmp	r3, #4
 8002384:	d107      	bne.n	8002396 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002394:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e06b      	b.n	8002472 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	781a      	ldrb	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d11b      	bne.n	8002410 <HAL_I2C_Master_Transmit+0x188>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d017      	beq.n	8002410 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	781a      	ldrb	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	6a39      	ldr	r1, [r7, #32]
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 fb47 	bl	8002aa8 <I2C_WaitOnBTFFlagUntilTimeout>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00d      	beq.n	800243c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	2b04      	cmp	r3, #4
 8002426:	d107      	bne.n	8002438 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002436:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e01a      	b.n	8002472 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002440:	2b00      	cmp	r3, #0
 8002442:	d194      	bne.n	800236e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002452:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2220      	movs	r2, #32
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	e000      	b.n	8002472 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002470:	2302      	movs	r3, #2
  }
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	00100002 	.word	0x00100002
 8002480:	ffff0000 	.word	0xffff0000

08002484 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	460b      	mov	r3, r1
 8002492:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002494:	f7ff fac2 	bl	8001a1c <HAL_GetTick>
 8002498:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	f040 8111 	bne.w	80026ce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2319      	movs	r3, #25
 80024b2:	2201      	movs	r2, #1
 80024b4:	4988      	ldr	r1, [pc, #544]	; (80026d8 <HAL_I2C_IsDeviceReady+0x254>)
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f994 	bl	80027e4 <I2C_WaitOnFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80024c2:	2302      	movs	r3, #2
 80024c4:	e104      	b.n	80026d0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_I2C_IsDeviceReady+0x50>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e0fd      	b.n	80026d0 <HAL_I2C_IsDeviceReady+0x24c>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d007      	beq.n	80024fa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0201 	orr.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002508:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2224      	movs	r2, #36	; 0x24
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4a70      	ldr	r2, [pc, #448]	; (80026dc <HAL_I2C_IsDeviceReady+0x258>)
 800251c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800252c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2200      	movs	r2, #0
 8002536:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f952 	bl	80027e4 <I2C_WaitOnFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00d      	beq.n	8002562 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002554:	d103      	bne.n	800255e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e0b6      	b.n	80026d0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002562:	897b      	ldrh	r3, [r7, #10]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002570:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002572:	f7ff fa53 	bl	8001a1c <HAL_GetTick>
 8002576:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b02      	cmp	r3, #2
 8002584:	bf0c      	ite	eq
 8002586:	2301      	moveq	r3, #1
 8002588:	2300      	movne	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259c:	bf0c      	ite	eq
 800259e:	2301      	moveq	r3, #1
 80025a0:	2300      	movne	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025a6:	e025      	b.n	80025f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025a8:	f7ff fa38 	bl	8001a1c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d302      	bcc.n	80025be <HAL_I2C_IsDeviceReady+0x13a>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d103      	bne.n	80025c6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	22a0      	movs	r2, #160	; 0xa0
 80025c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ea:	bf0c      	ite	eq
 80025ec:	2301      	moveq	r3, #1
 80025ee:	2300      	movne	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2ba0      	cmp	r3, #160	; 0xa0
 80025fe:	d005      	beq.n	800260c <HAL_I2C_IsDeviceReady+0x188>
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d102      	bne.n	800260c <HAL_I2C_IsDeviceReady+0x188>
 8002606:	7dbb      	ldrb	r3, [r7, #22]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cd      	beq.n	80025a8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b02      	cmp	r3, #2
 8002620:	d129      	bne.n	8002676 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002630:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	2319      	movs	r3, #25
 800264e:	2201      	movs	r2, #1
 8002650:	4921      	ldr	r1, [pc, #132]	; (80026d8 <HAL_I2C_IsDeviceReady+0x254>)
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f8c6 	bl	80027e4 <I2C_WaitOnFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e036      	b.n	80026d0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e02c      	b.n	80026d0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002684:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800268e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	2319      	movs	r3, #25
 8002696:	2201      	movs	r2, #1
 8002698:	490f      	ldr	r1, [pc, #60]	; (80026d8 <HAL_I2C_IsDeviceReady+0x254>)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f8a2 	bl	80027e4 <I2C_WaitOnFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e012      	b.n	80026d0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	3301      	adds	r3, #1
 80026ae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	f4ff af32 	bcc.w	800251e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80026ce:	2302      	movs	r3, #2
  }
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3720      	adds	r7, #32
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	00100002 	.word	0x00100002
 80026dc:	ffff0000 	.word	0xffff0000

080026e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	460b      	mov	r3, r1
 80026ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d006      	beq.n	800270a <I2C_MasterRequestWrite+0x2a>
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d003      	beq.n	800270a <I2C_MasterRequestWrite+0x2a>
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002708:	d108      	bne.n	800271c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	e00b      	b.n	8002734 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	2b12      	cmp	r3, #18
 8002722:	d107      	bne.n	8002734 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002732:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 f84f 	bl	80027e4 <I2C_WaitOnFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00d      	beq.n	8002768 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800275a:	d103      	bne.n	8002764 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002762:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e035      	b.n	80027d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002770:	d108      	bne.n	8002784 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002772:	897b      	ldrh	r3, [r7, #10]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002780:	611a      	str	r2, [r3, #16]
 8002782:	e01b      	b.n	80027bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002784:	897b      	ldrh	r3, [r7, #10]
 8002786:	11db      	asrs	r3, r3, #7
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f003 0306 	and.w	r3, r3, #6
 800278e:	b2db      	uxtb	r3, r3
 8002790:	f063 030f 	orn	r3, r3, #15
 8002794:	b2da      	uxtb	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	490e      	ldr	r1, [pc, #56]	; (80027dc <I2C_MasterRequestWrite+0xfc>)
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f898 	bl	80028d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e010      	b.n	80027d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027b2:	897b      	ldrh	r3, [r7, #10]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	4907      	ldr	r1, [pc, #28]	; (80027e0 <I2C_MasterRequestWrite+0x100>)
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f888 	bl	80028d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	00010008 	.word	0x00010008
 80027e0:	00010002 	.word	0x00010002

080027e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	4613      	mov	r3, r2
 80027f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027f4:	e048      	b.n	8002888 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fc:	d044      	beq.n	8002888 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fe:	f7ff f90d 	bl	8001a1c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d302      	bcc.n	8002814 <I2C_WaitOnFlagUntilTimeout+0x30>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d139      	bne.n	8002888 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	0c1b      	lsrs	r3, r3, #16
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d10d      	bne.n	800283a <I2C_WaitOnFlagUntilTimeout+0x56>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	43da      	mvns	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	4013      	ands	r3, r2
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	e00c      	b.n	8002854 <I2C_WaitOnFlagUntilTimeout+0x70>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	43da      	mvns	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	4013      	ands	r3, r2
 8002846:	b29b      	uxth	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	429a      	cmp	r2, r3
 8002858:	d116      	bne.n	8002888 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	f043 0220 	orr.w	r2, r3, #32
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e023      	b.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	0c1b      	lsrs	r3, r3, #16
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d10d      	bne.n	80028ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	43da      	mvns	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	4013      	ands	r3, r2
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	e00c      	b.n	80028c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	43da      	mvns	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	4013      	ands	r3, r2
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf0c      	ite	eq
 80028c0:	2301      	moveq	r3, #1
 80028c2:	2300      	movne	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d093      	beq.n	80027f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028e6:	e071      	b.n	80029cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f6:	d123      	bne.n	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002906:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002910:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f043 0204 	orr.w	r2, r3, #4
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e067      	b.n	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002946:	d041      	beq.n	80029cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002948:	f7ff f868 	bl	8001a1c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	d302      	bcc.n	800295e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d136      	bne.n	80029cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d10c      	bne.n	8002982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	43da      	mvns	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4013      	ands	r3, r2
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	bf14      	ite	ne
 800297a:	2301      	movne	r3, #1
 800297c:	2300      	moveq	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	e00b      	b.n	800299a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	43da      	mvns	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	4013      	ands	r3, r2
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf14      	ite	ne
 8002994:	2301      	movne	r3, #1
 8002996:	2300      	moveq	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d016      	beq.n	80029cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f043 0220 	orr.w	r2, r3, #32
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e021      	b.n	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	0c1b      	lsrs	r3, r3, #16
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d10c      	bne.n	80029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	43da      	mvns	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	4013      	ands	r3, r2
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	bf14      	ite	ne
 80029e8:	2301      	movne	r3, #1
 80029ea:	2300      	moveq	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	e00b      	b.n	8002a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	4013      	ands	r3, r2
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	bf14      	ite	ne
 8002a02:	2301      	movne	r3, #1
 8002a04:	2300      	moveq	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f47f af6d 	bne.w	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a24:	e034      	b.n	8002a90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f886 	bl	8002b38 <I2C_IsAcknowledgeFailed>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e034      	b.n	8002aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3c:	d028      	beq.n	8002a90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3e:	f7fe ffed 	bl	8001a1c <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d302      	bcc.n	8002a54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d11d      	bne.n	8002a90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5e:	2b80      	cmp	r3, #128	; 0x80
 8002a60:	d016      	beq.n	8002a90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	f043 0220 	orr.w	r2, r3, #32
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e007      	b.n	8002aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9a:	2b80      	cmp	r3, #128	; 0x80
 8002a9c:	d1c3      	bne.n	8002a26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ab4:	e034      	b.n	8002b20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f83e 	bl	8002b38 <I2C_IsAcknowledgeFailed>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e034      	b.n	8002b30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d028      	beq.n	8002b20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ace:	f7fe ffa5 	bl	8001a1c <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d302      	bcc.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d11d      	bne.n	8002b20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d016      	beq.n	8002b20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e007      	b.n	8002b30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d1c3      	bne.n	8002ab6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4e:	d11b      	bne.n	8002b88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f043 0204 	orr.w	r2, r3, #4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0cc      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bac:	4b68      	ldr	r3, [pc, #416]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d90c      	bls.n	8002bd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b65      	ldr	r3, [pc, #404]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b63      	ldr	r3, [pc, #396]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0b8      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d020      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bec:	4b59      	ldr	r3, [pc, #356]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4a58      	ldr	r2, [pc, #352]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c04:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	4a52      	ldr	r2, [pc, #328]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c10:	4b50      	ldr	r3, [pc, #320]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	494d      	ldr	r1, [pc, #308]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d044      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d119      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e07f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c56:	4b3f      	ldr	r3, [pc, #252]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e06f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c66:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e067      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c76:	4b37      	ldr	r3, [pc, #220]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f023 0203 	bic.w	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4934      	ldr	r1, [pc, #208]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c88:	f7fe fec8 	bl	8001a1c <HAL_GetTick>
 8002c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c90:	f7fe fec4 	bl	8001a1c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e04f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca6:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 020c 	and.w	r2, r3, #12
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d1eb      	bne.n	8002c90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d20c      	bcs.n	8002ce0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e032      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4916      	ldr	r1, [pc, #88]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	490e      	ldr	r1, [pc, #56]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d1e:	f000 f887 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8002d22:	4602      	mov	r2, r0
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	490a      	ldr	r1, [pc, #40]	; (8002d58 <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	5ccb      	ldrb	r3, [r1, r3]
 8002d32:	fa22 f303 	lsr.w	r3, r2, r3
 8002d36:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe fd28 	bl	8001794 <HAL_InitTick>

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023c00 	.word	0x40023c00
 8002d54:	40023800 	.word	0x40023800
 8002d58:	0800717c 	.word	0x0800717c
 8002d5c:	20000008 	.word	0x20000008
 8002d60:	2000000c 	.word	0x2000000c

08002d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000008 	.word	0x20000008

08002d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d80:	f7ff fff0 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0a9b      	lsrs	r3, r3, #10
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4903      	ldr	r1, [pc, #12]	; (8002da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	0800718c 	.word	0x0800718c

08002da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002da8:	f7ff ffdc 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	0b5b      	lsrs	r3, r3, #13
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	4903      	ldr	r1, [pc, #12]	; (8002dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	0800718c 	.word	0x0800718c

08002dcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	220f      	movs	r2, #15
 8002dda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_RCC_GetClockConfig+0x5c>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 0203 	and.w	r2, r3, #3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <HAL_RCC_GetClockConfig+0x5c>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <HAL_RCC_GetClockConfig+0x5c>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_RCC_GetClockConfig+0x5c>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	08db      	lsrs	r3, r3, #3
 8002e06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <HAL_RCC_GetClockConfig+0x60>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 020f 	and.w	r2, r3, #15
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	601a      	str	r2, [r3, #0]
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40023c00 	.word	0x40023c00

08002e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e34:	b0ae      	sub	sp, #184	; 0xb8
 8002e36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e56:	4bcb      	ldr	r3, [pc, #812]	; (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b0c      	cmp	r3, #12
 8002e60:	f200 8206 	bhi.w	8003270 <HAL_RCC_GetSysClockFreq+0x440>
 8002e64:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002ea1 	.word	0x08002ea1
 8002e70:	08003271 	.word	0x08003271
 8002e74:	08003271 	.word	0x08003271
 8002e78:	08003271 	.word	0x08003271
 8002e7c:	08002ea9 	.word	0x08002ea9
 8002e80:	08003271 	.word	0x08003271
 8002e84:	08003271 	.word	0x08003271
 8002e88:	08003271 	.word	0x08003271
 8002e8c:	08002eb1 	.word	0x08002eb1
 8002e90:	08003271 	.word	0x08003271
 8002e94:	08003271 	.word	0x08003271
 8002e98:	08003271 	.word	0x08003271
 8002e9c:	080030a1 	.word	0x080030a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ea0:	4bb9      	ldr	r3, [pc, #740]	; (8003188 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002ea6:	e1e7      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ea8:	4bb8      	ldr	r3, [pc, #736]	; (800318c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002eae:	e1e3      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb0:	4bb4      	ldr	r3, [pc, #720]	; (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ebc:	4bb1      	ldr	r3, [pc, #708]	; (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d071      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec8:	4bae      	ldr	r3, [pc, #696]	; (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	099b      	lsrs	r3, r3, #6
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ed4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002eea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002eee:	4622      	mov	r2, r4
 8002ef0:	462b      	mov	r3, r5
 8002ef2:	f04f 0000 	mov.w	r0, #0
 8002ef6:	f04f 0100 	mov.w	r1, #0
 8002efa:	0159      	lsls	r1, r3, #5
 8002efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f00:	0150      	lsls	r0, r2, #5
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4621      	mov	r1, r4
 8002f08:	1a51      	subs	r1, r2, r1
 8002f0a:	6439      	str	r1, [r7, #64]	; 0x40
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f12:	647b      	str	r3, [r7, #68]	; 0x44
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002f20:	4649      	mov	r1, r9
 8002f22:	018b      	lsls	r3, r1, #6
 8002f24:	4641      	mov	r1, r8
 8002f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f2a:	4641      	mov	r1, r8
 8002f2c:	018a      	lsls	r2, r1, #6
 8002f2e:	4641      	mov	r1, r8
 8002f30:	1a51      	subs	r1, r2, r1
 8002f32:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f34:	4649      	mov	r1, r9
 8002f36:	eb63 0301 	sbc.w	r3, r3, r1
 8002f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f48:	4649      	mov	r1, r9
 8002f4a:	00cb      	lsls	r3, r1, #3
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f52:	4641      	mov	r1, r8
 8002f54:	00ca      	lsls	r2, r1, #3
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4622      	mov	r2, r4
 8002f5e:	189b      	adds	r3, r3, r2
 8002f60:	633b      	str	r3, [r7, #48]	; 0x30
 8002f62:	462b      	mov	r3, r5
 8002f64:	460a      	mov	r2, r1
 8002f66:	eb42 0303 	adc.w	r3, r2, r3
 8002f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f78:	4629      	mov	r1, r5
 8002f7a:	024b      	lsls	r3, r1, #9
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f82:	4621      	mov	r1, r4
 8002f84:	024a      	lsls	r2, r1, #9
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f98:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f9c:	f7fd f94a 	bl	8000234 <__aeabi_uldivmod>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002faa:	e067      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fac:	4b75      	ldr	r3, [pc, #468]	; (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fb8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002fbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002fce:	4622      	mov	r2, r4
 8002fd0:	462b      	mov	r3, r5
 8002fd2:	f04f 0000 	mov.w	r0, #0
 8002fd6:	f04f 0100 	mov.w	r1, #0
 8002fda:	0159      	lsls	r1, r3, #5
 8002fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe0:	0150      	lsls	r0, r2, #5
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	1a51      	subs	r1, r2, r1
 8002fea:	62b9      	str	r1, [r7, #40]	; 0x28
 8002fec:	4629      	mov	r1, r5
 8002fee:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003000:	4649      	mov	r1, r9
 8003002:	018b      	lsls	r3, r1, #6
 8003004:	4641      	mov	r1, r8
 8003006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800300a:	4641      	mov	r1, r8
 800300c:	018a      	lsls	r2, r1, #6
 800300e:	4641      	mov	r1, r8
 8003010:	ebb2 0a01 	subs.w	sl, r2, r1
 8003014:	4649      	mov	r1, r9
 8003016:	eb63 0b01 	sbc.w	fp, r3, r1
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003026:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800302a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800302e:	4692      	mov	sl, r2
 8003030:	469b      	mov	fp, r3
 8003032:	4623      	mov	r3, r4
 8003034:	eb1a 0303 	adds.w	r3, sl, r3
 8003038:	623b      	str	r3, [r7, #32]
 800303a:	462b      	mov	r3, r5
 800303c:	eb4b 0303 	adc.w	r3, fp, r3
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800304e:	4629      	mov	r1, r5
 8003050:	028b      	lsls	r3, r1, #10
 8003052:	4621      	mov	r1, r4
 8003054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003058:	4621      	mov	r1, r4
 800305a:	028a      	lsls	r2, r1, #10
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003064:	2200      	movs	r2, #0
 8003066:	673b      	str	r3, [r7, #112]	; 0x70
 8003068:	677a      	str	r2, [r7, #116]	; 0x74
 800306a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800306e:	f7fd f8e1 	bl	8000234 <__aeabi_uldivmod>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4613      	mov	r3, r2
 8003078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800307c:	4b41      	ldr	r3, [pc, #260]	; (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	0c1b      	lsrs	r3, r3, #16
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	3301      	adds	r3, #1
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800308e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003092:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800309e:	e0eb      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a0:	4b38      	ldr	r3, [pc, #224]	; (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ac:	4b35      	ldr	r3, [pc, #212]	; (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d06b      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b8:	4b32      	ldr	r3, [pc, #200]	; (8003184 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	099b      	lsrs	r3, r3, #6
 80030be:	2200      	movs	r2, #0
 80030c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80030c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ca:	663b      	str	r3, [r7, #96]	; 0x60
 80030cc:	2300      	movs	r3, #0
 80030ce:	667b      	str	r3, [r7, #100]	; 0x64
 80030d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80030d4:	4622      	mov	r2, r4
 80030d6:	462b      	mov	r3, r5
 80030d8:	f04f 0000 	mov.w	r0, #0
 80030dc:	f04f 0100 	mov.w	r1, #0
 80030e0:	0159      	lsls	r1, r3, #5
 80030e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e6:	0150      	lsls	r0, r2, #5
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4621      	mov	r1, r4
 80030ee:	1a51      	subs	r1, r2, r1
 80030f0:	61b9      	str	r1, [r7, #24]
 80030f2:	4629      	mov	r1, r5
 80030f4:	eb63 0301 	sbc.w	r3, r3, r1
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003106:	4659      	mov	r1, fp
 8003108:	018b      	lsls	r3, r1, #6
 800310a:	4651      	mov	r1, sl
 800310c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003110:	4651      	mov	r1, sl
 8003112:	018a      	lsls	r2, r1, #6
 8003114:	4651      	mov	r1, sl
 8003116:	ebb2 0801 	subs.w	r8, r2, r1
 800311a:	4659      	mov	r1, fp
 800311c:	eb63 0901 	sbc.w	r9, r3, r1
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800312c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003130:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003134:	4690      	mov	r8, r2
 8003136:	4699      	mov	r9, r3
 8003138:	4623      	mov	r3, r4
 800313a:	eb18 0303 	adds.w	r3, r8, r3
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	462b      	mov	r3, r5
 8003142:	eb49 0303 	adc.w	r3, r9, r3
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003154:	4629      	mov	r1, r5
 8003156:	024b      	lsls	r3, r1, #9
 8003158:	4621      	mov	r1, r4
 800315a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800315e:	4621      	mov	r1, r4
 8003160:	024a      	lsls	r2, r1, #9
 8003162:	4610      	mov	r0, r2
 8003164:	4619      	mov	r1, r3
 8003166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800316a:	2200      	movs	r2, #0
 800316c:	65bb      	str	r3, [r7, #88]	; 0x58
 800316e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003170:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003174:	f7fd f85e 	bl	8000234 <__aeabi_uldivmod>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4613      	mov	r3, r2
 800317e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003182:	e065      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x420>
 8003184:	40023800 	.word	0x40023800
 8003188:	00f42400 	.word	0x00f42400
 800318c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003190:	4b3d      	ldr	r3, [pc, #244]	; (8003288 <HAL_RCC_GetSysClockFreq+0x458>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	099b      	lsrs	r3, r3, #6
 8003196:	2200      	movs	r2, #0
 8003198:	4618      	mov	r0, r3
 800319a:	4611      	mov	r1, r2
 800319c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031a0:	653b      	str	r3, [r7, #80]	; 0x50
 80031a2:	2300      	movs	r3, #0
 80031a4:	657b      	str	r3, [r7, #84]	; 0x54
 80031a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80031aa:	4642      	mov	r2, r8
 80031ac:	464b      	mov	r3, r9
 80031ae:	f04f 0000 	mov.w	r0, #0
 80031b2:	f04f 0100 	mov.w	r1, #0
 80031b6:	0159      	lsls	r1, r3, #5
 80031b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031bc:	0150      	lsls	r0, r2, #5
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4641      	mov	r1, r8
 80031c4:	1a51      	subs	r1, r2, r1
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	4649      	mov	r1, r9
 80031ca:	eb63 0301 	sbc.w	r3, r3, r1
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80031dc:	4659      	mov	r1, fp
 80031de:	018b      	lsls	r3, r1, #6
 80031e0:	4651      	mov	r1, sl
 80031e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031e6:	4651      	mov	r1, sl
 80031e8:	018a      	lsls	r2, r1, #6
 80031ea:	4651      	mov	r1, sl
 80031ec:	1a54      	subs	r4, r2, r1
 80031ee:	4659      	mov	r1, fp
 80031f0:	eb63 0501 	sbc.w	r5, r3, r1
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	00eb      	lsls	r3, r5, #3
 80031fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003202:	00e2      	lsls	r2, r4, #3
 8003204:	4614      	mov	r4, r2
 8003206:	461d      	mov	r5, r3
 8003208:	4643      	mov	r3, r8
 800320a:	18e3      	adds	r3, r4, r3
 800320c:	603b      	str	r3, [r7, #0]
 800320e:	464b      	mov	r3, r9
 8003210:	eb45 0303 	adc.w	r3, r5, r3
 8003214:	607b      	str	r3, [r7, #4]
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003222:	4629      	mov	r1, r5
 8003224:	028b      	lsls	r3, r1, #10
 8003226:	4621      	mov	r1, r4
 8003228:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800322c:	4621      	mov	r1, r4
 800322e:	028a      	lsls	r2, r1, #10
 8003230:	4610      	mov	r0, r2
 8003232:	4619      	mov	r1, r3
 8003234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003238:	2200      	movs	r2, #0
 800323a:	64bb      	str	r3, [r7, #72]	; 0x48
 800323c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800323e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003242:	f7fc fff7 	bl	8000234 <__aeabi_uldivmod>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4613      	mov	r3, r2
 800324c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003250:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <HAL_RCC_GetSysClockFreq+0x458>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	0f1b      	lsrs	r3, r3, #28
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800325e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003262:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003266:	fbb2 f3f3 	udiv	r3, r2, r3
 800326a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800326e:	e003      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003276:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003278:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800327c:	4618      	mov	r0, r3
 800327e:	37b8      	adds	r7, #184	; 0xb8
 8003280:	46bd      	mov	sp, r7
 8003282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	00f42400 	.word	0x00f42400

08003290 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e28d      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8083 	beq.w	80033b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032b0:	4b94      	ldr	r3, [pc, #592]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d019      	beq.n	80032f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032bc:	4b91      	ldr	r3, [pc, #580]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032c8:	4b8e      	ldr	r3, [pc, #568]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d4:	d00c      	beq.n	80032f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d6:	4b8b      	ldr	r3, [pc, #556]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032de:	2b0c      	cmp	r3, #12
 80032e0:	d112      	bne.n	8003308 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e2:	4b88      	ldr	r3, [pc, #544]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ee:	d10b      	bne.n	8003308 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f0:	4b84      	ldr	r3, [pc, #528]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d05b      	beq.n	80033b4 <HAL_RCC_OscConfig+0x124>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d157      	bne.n	80033b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e25a      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003310:	d106      	bne.n	8003320 <HAL_RCC_OscConfig+0x90>
 8003312:	4b7c      	ldr	r3, [pc, #496]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a7b      	ldr	r2, [pc, #492]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e01d      	b.n	800335c <HAL_RCC_OscConfig+0xcc>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003328:	d10c      	bne.n	8003344 <HAL_RCC_OscConfig+0xb4>
 800332a:	4b76      	ldr	r3, [pc, #472]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a75      	ldr	r2, [pc, #468]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	4b73      	ldr	r3, [pc, #460]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a72      	ldr	r2, [pc, #456]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e00b      	b.n	800335c <HAL_RCC_OscConfig+0xcc>
 8003344:	4b6f      	ldr	r3, [pc, #444]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a6e      	ldr	r2, [pc, #440]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 800334a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b6c      	ldr	r3, [pc, #432]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a6b      	ldr	r2, [pc, #428]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d013      	beq.n	800338c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fb5a 	bl	8001a1c <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800336c:	f7fe fb56 	bl	8001a1c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e21f      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	4b61      	ldr	r3, [pc, #388]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0xdc>
 800338a:	e014      	b.n	80033b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fe fb46 	bl	8001a1c <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003394:	f7fe fb42 	bl	8001a1c <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	; 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e20b      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	4b57      	ldr	r3, [pc, #348]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x104>
 80033b2:	e000      	b.n	80033b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d06f      	beq.n	80034a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033c2:	4b50      	ldr	r3, [pc, #320]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d017      	beq.n	80033fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033ce:	4b4d      	ldr	r3, [pc, #308]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d105      	bne.n	80033e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033da:	4b4a      	ldr	r3, [pc, #296]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e6:	4b47      	ldr	r3, [pc, #284]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d11c      	bne.n	800342c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f2:	4b44      	ldr	r3, [pc, #272]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	4b41      	ldr	r3, [pc, #260]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x186>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e1d3      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b3b      	ldr	r3, [pc, #236]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4937      	ldr	r1, [pc, #220]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	e03a      	b.n	80034a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003434:	4b34      	ldr	r3, [pc, #208]	; (8003508 <HAL_RCC_OscConfig+0x278>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fe faef 	bl	8001a1c <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003442:	f7fe faeb 	bl	8001a1c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e1b4      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b28      	ldr	r3, [pc, #160]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4925      	ldr	r1, [pc, #148]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]
 8003474:	e015      	b.n	80034a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003476:	4b24      	ldr	r3, [pc, #144]	; (8003508 <HAL_RCC_OscConfig+0x278>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fe face 	bl	8001a1c <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003484:	f7fe faca 	bl	8001a1c <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e193      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003496:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d036      	beq.n	800351c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <HAL_RCC_OscConfig+0x27c>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7fe faae 	bl	8001a1c <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c4:	f7fe faaa 	bl	8001a1c <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e173      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_OscConfig+0x274>)
 80034d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x234>
 80034e2:	e01b      	b.n	800351c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e4:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_RCC_OscConfig+0x27c>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ea:	f7fe fa97 	bl	8001a1c <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f0:	e00e      	b.n	8003510 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f2:	f7fe fa93 	bl	8001a1c <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d907      	bls.n	8003510 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e15c      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
 8003504:	40023800 	.word	0x40023800
 8003508:	42470000 	.word	0x42470000
 800350c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003510:	4b8a      	ldr	r3, [pc, #552]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1ea      	bne.n	80034f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8097 	beq.w	8003658 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800352a:	2300      	movs	r3, #0
 800352c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352e:	4b83      	ldr	r3, [pc, #524]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	4b7f      	ldr	r3, [pc, #508]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	4a7e      	ldr	r2, [pc, #504]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003548:	6413      	str	r3, [r2, #64]	; 0x40
 800354a:	4b7c      	ldr	r3, [pc, #496]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355a:	4b79      	ldr	r3, [pc, #484]	; (8003740 <HAL_RCC_OscConfig+0x4b0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d118      	bne.n	8003598 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003566:	4b76      	ldr	r3, [pc, #472]	; (8003740 <HAL_RCC_OscConfig+0x4b0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a75      	ldr	r2, [pc, #468]	; (8003740 <HAL_RCC_OscConfig+0x4b0>)
 800356c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003572:	f7fe fa53 	bl	8001a1c <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357a:	f7fe fa4f 	bl	8001a1c <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e118      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	4b6c      	ldr	r3, [pc, #432]	; (8003740 <HAL_RCC_OscConfig+0x4b0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x31e>
 80035a0:	4b66      	ldr	r3, [pc, #408]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	4a65      	ldr	r2, [pc, #404]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6713      	str	r3, [r2, #112]	; 0x70
 80035ac:	e01c      	b.n	80035e8 <HAL_RCC_OscConfig+0x358>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b05      	cmp	r3, #5
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x340>
 80035b6:	4b61      	ldr	r3, [pc, #388]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	4a60      	ldr	r2, [pc, #384]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035bc:	f043 0304 	orr.w	r3, r3, #4
 80035c0:	6713      	str	r3, [r2, #112]	; 0x70
 80035c2:	4b5e      	ldr	r3, [pc, #376]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	4a5d      	ldr	r2, [pc, #372]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6713      	str	r3, [r2, #112]	; 0x70
 80035ce:	e00b      	b.n	80035e8 <HAL_RCC_OscConfig+0x358>
 80035d0:	4b5a      	ldr	r3, [pc, #360]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a59      	ldr	r2, [pc, #356]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	6713      	str	r3, [r2, #112]	; 0x70
 80035dc:	4b57      	ldr	r3, [pc, #348]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	4a56      	ldr	r2, [pc, #344]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035e2:	f023 0304 	bic.w	r3, r3, #4
 80035e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d015      	beq.n	800361c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fe fa14 	bl	8001a1c <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f6:	e00a      	b.n	800360e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f7fe fa10 	bl	8001a1c <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e0d7      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360e:	4b4b      	ldr	r3, [pc, #300]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0ee      	beq.n	80035f8 <HAL_RCC_OscConfig+0x368>
 800361a:	e014      	b.n	8003646 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fe f9fe 	bl	8001a1c <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003622:	e00a      	b.n	800363a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7fe f9fa 	bl	8001a1c <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e0c1      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363a:	4b40      	ldr	r3, [pc, #256]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1ee      	bne.n	8003624 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d105      	bne.n	8003658 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364c:	4b3b      	ldr	r3, [pc, #236]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	4a3a      	ldr	r2, [pc, #232]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80ad 	beq.w	80037bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003662:	4b36      	ldr	r3, [pc, #216]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b08      	cmp	r3, #8
 800366c:	d060      	beq.n	8003730 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d145      	bne.n	8003702 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003676:	4b33      	ldr	r3, [pc, #204]	; (8003744 <HAL_RCC_OscConfig+0x4b4>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fe f9ce 	bl	8001a1c <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003684:	f7fe f9ca 	bl	8001a1c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e093      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003696:	4b29      	ldr	r3, [pc, #164]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	019b      	lsls	r3, r3, #6
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	085b      	lsrs	r3, r3, #1
 80036ba:	3b01      	subs	r3, #1
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	061b      	lsls	r3, r3, #24
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	071b      	lsls	r3, r3, #28
 80036ce:	491b      	ldr	r1, [pc, #108]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d4:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <HAL_RCC_OscConfig+0x4b4>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036da:	f7fe f99f 	bl	8001a1c <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e2:	f7fe f99b 	bl	8001a1c <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e064      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f4:	4b11      	ldr	r3, [pc, #68]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x452>
 8003700:	e05c      	b.n	80037bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	4b10      	ldr	r3, [pc, #64]	; (8003744 <HAL_RCC_OscConfig+0x4b4>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fe f988 	bl	8001a1c <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003710:	f7fe f984 	bl	8001a1c <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e04d      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x480>
 800372e:	e045      	b.n	80037bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d107      	bne.n	8003748 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e040      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
 800373c:	40023800 	.word	0x40023800
 8003740:	40007000 	.word	0x40007000
 8003744:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003748:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <HAL_RCC_OscConfig+0x538>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d030      	beq.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d129      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376e:	429a      	cmp	r2, r3
 8003770:	d122      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003778:	4013      	ands	r3, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800377e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003780:	4293      	cmp	r3, r2
 8003782:	d119      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	3b01      	subs	r3, #1
 8003792:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d10f      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800

080037cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e041      	b.n	8003862 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f839 	bl	800386a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3304      	adds	r3, #4
 8003808:	4619      	mov	r1, r3
 800380a:	4610      	mov	r0, r2
 800380c:	f000 f9c0 	bl	8003b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	d001      	beq.n	8003898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e04e      	b.n	8003936 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a23      	ldr	r2, [pc, #140]	; (8003944 <HAL_TIM_Base_Start_IT+0xc4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d022      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x80>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c2:	d01d      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x80>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1f      	ldr	r2, [pc, #124]	; (8003948 <HAL_TIM_Base_Start_IT+0xc8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d018      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x80>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1e      	ldr	r2, [pc, #120]	; (800394c <HAL_TIM_Base_Start_IT+0xcc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d013      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x80>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1c      	ldr	r2, [pc, #112]	; (8003950 <HAL_TIM_Base_Start_IT+0xd0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00e      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x80>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1b      	ldr	r2, [pc, #108]	; (8003954 <HAL_TIM_Base_Start_IT+0xd4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d009      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x80>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a19      	ldr	r2, [pc, #100]	; (8003958 <HAL_TIM_Base_Start_IT+0xd8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d004      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x80>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a18      	ldr	r2, [pc, #96]	; (800395c <HAL_TIM_Base_Start_IT+0xdc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d111      	bne.n	8003924 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b06      	cmp	r3, #6
 8003910:	d010      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0201 	orr.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003922:	e007      	b.n	8003934 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40010000 	.word	0x40010000
 8003948:	40000400 	.word	0x40000400
 800394c:	40000800 	.word	0x40000800
 8003950:	40000c00 	.word	0x40000c00
 8003954:	40010400 	.word	0x40010400
 8003958:	40014000 	.word	0x40014000
 800395c:	40001800 	.word	0x40001800

08003960 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d020      	beq.n	80039c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d01b      	beq.n	80039c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0202 	mvn.w	r2, #2
 8003994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f8d2 	bl	8003b54 <HAL_TIM_IC_CaptureCallback>
 80039b0:	e005      	b.n	80039be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f8c4 	bl	8003b40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f8d5 	bl	8003b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d020      	beq.n	8003a10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d01b      	beq.n	8003a10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0204 	mvn.w	r2, #4
 80039e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f8ac 	bl	8003b54 <HAL_TIM_IC_CaptureCallback>
 80039fc:	e005      	b.n	8003a0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f89e 	bl	8003b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f8af 	bl	8003b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d020      	beq.n	8003a5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01b      	beq.n	8003a5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0208 	mvn.w	r2, #8
 8003a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2204      	movs	r2, #4
 8003a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f886 	bl	8003b54 <HAL_TIM_IC_CaptureCallback>
 8003a48:	e005      	b.n	8003a56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f878 	bl	8003b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f889 	bl	8003b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d020      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f003 0310 	and.w	r3, r3, #16
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01b      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0210 	mvn.w	r2, #16
 8003a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f860 	bl	8003b54 <HAL_TIM_IC_CaptureCallback>
 8003a94:	e005      	b.n	8003aa2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f852 	bl	8003b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f863 	bl	8003b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00c      	beq.n	8003acc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0201 	mvn.w	r2, #1
 8003ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fd fac8 	bl	800105c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00c      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f906 	bl	8003cfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00c      	beq.n	8003b14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f834 	bl	8003b7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00c      	beq.n	8003b38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d007      	beq.n	8003b38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0220 	mvn.w	r2, #32
 8003b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f8d8 	bl	8003ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a46      	ldr	r2, [pc, #280]	; (8003cbc <TIM_Base_SetConfig+0x12c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d013      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bae:	d00f      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a43      	ldr	r2, [pc, #268]	; (8003cc0 <TIM_Base_SetConfig+0x130>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00b      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a42      	ldr	r2, [pc, #264]	; (8003cc4 <TIM_Base_SetConfig+0x134>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d007      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a41      	ldr	r2, [pc, #260]	; (8003cc8 <TIM_Base_SetConfig+0x138>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a40      	ldr	r2, [pc, #256]	; (8003ccc <TIM_Base_SetConfig+0x13c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d108      	bne.n	8003be2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a35      	ldr	r2, [pc, #212]	; (8003cbc <TIM_Base_SetConfig+0x12c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d02b      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf0:	d027      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a32      	ldr	r2, [pc, #200]	; (8003cc0 <TIM_Base_SetConfig+0x130>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d023      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a31      	ldr	r2, [pc, #196]	; (8003cc4 <TIM_Base_SetConfig+0x134>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d01f      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a30      	ldr	r2, [pc, #192]	; (8003cc8 <TIM_Base_SetConfig+0x138>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01b      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a2f      	ldr	r2, [pc, #188]	; (8003ccc <TIM_Base_SetConfig+0x13c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d017      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a2e      	ldr	r2, [pc, #184]	; (8003cd0 <TIM_Base_SetConfig+0x140>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d013      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a2d      	ldr	r2, [pc, #180]	; (8003cd4 <TIM_Base_SetConfig+0x144>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00f      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a2c      	ldr	r2, [pc, #176]	; (8003cd8 <TIM_Base_SetConfig+0x148>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00b      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a2b      	ldr	r2, [pc, #172]	; (8003cdc <TIM_Base_SetConfig+0x14c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d007      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a2a      	ldr	r2, [pc, #168]	; (8003ce0 <TIM_Base_SetConfig+0x150>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d003      	beq.n	8003c42 <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a29      	ldr	r2, [pc, #164]	; (8003ce4 <TIM_Base_SetConfig+0x154>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d108      	bne.n	8003c54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a10      	ldr	r2, [pc, #64]	; (8003cbc <TIM_Base_SetConfig+0x12c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d003      	beq.n	8003c88 <TIM_Base_SetConfig+0xf8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a12      	ldr	r2, [pc, #72]	; (8003ccc <TIM_Base_SetConfig+0x13c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d103      	bne.n	8003c90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d105      	bne.n	8003cae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f023 0201 	bic.w	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	611a      	str	r2, [r3, #16]
  }
}
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40000400 	.word	0x40000400
 8003cc4:	40000800 	.word	0x40000800
 8003cc8:	40000c00 	.word	0x40000c00
 8003ccc:	40010400 	.word	0x40010400
 8003cd0:	40014000 	.word	0x40014000
 8003cd4:	40014400 	.word	0x40014400
 8003cd8:	40014800 	.word	0x40014800
 8003cdc:	40001800 	.word	0x40001800
 8003ce0:	40001c00 	.word	0x40001c00
 8003ce4:	40002000 	.word	0x40002000

08003ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e042      	b.n	8003da8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d106      	bne.n	8003d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fd fce4 	bl	8001704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2224      	movs	r2, #36	; 0x24
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f82b 	bl	8003db0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003db4:	b0c0      	sub	sp, #256	; 0x100
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dcc:	68d9      	ldr	r1, [r3, #12]
 8003dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	ea40 0301 	orr.w	r3, r0, r1
 8003dd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e08:	f021 010c 	bic.w	r1, r1, #12
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e16:	430b      	orrs	r3, r1
 8003e18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2a:	6999      	ldr	r1, [r3, #24]
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	ea40 0301 	orr.w	r3, r0, r1
 8003e36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4b8f      	ldr	r3, [pc, #572]	; (800407c <UART_SetConfig+0x2cc>)
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d005      	beq.n	8003e50 <UART_SetConfig+0xa0>
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4b8d      	ldr	r3, [pc, #564]	; (8004080 <UART_SetConfig+0x2d0>)
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d104      	bne.n	8003e5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e50:	f7fe ffa8 	bl	8002da4 <HAL_RCC_GetPCLK2Freq>
 8003e54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e58:	e003      	b.n	8003e62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e5a:	f7fe ff8f 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 8003e5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e6c:	f040 810c 	bne.w	8004088 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e74:	2200      	movs	r2, #0
 8003e76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e82:	4622      	mov	r2, r4
 8003e84:	462b      	mov	r3, r5
 8003e86:	1891      	adds	r1, r2, r2
 8003e88:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e8a:	415b      	adcs	r3, r3
 8003e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e92:	4621      	mov	r1, r4
 8003e94:	eb12 0801 	adds.w	r8, r2, r1
 8003e98:	4629      	mov	r1, r5
 8003e9a:	eb43 0901 	adc.w	r9, r3, r1
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eb2:	4690      	mov	r8, r2
 8003eb4:	4699      	mov	r9, r3
 8003eb6:	4623      	mov	r3, r4
 8003eb8:	eb18 0303 	adds.w	r3, r8, r3
 8003ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ec0:	462b      	mov	r3, r5
 8003ec2:	eb49 0303 	adc.w	r3, r9, r3
 8003ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ed6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003eda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ede:	460b      	mov	r3, r1
 8003ee0:	18db      	adds	r3, r3, r3
 8003ee2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	eb42 0303 	adc.w	r3, r2, r3
 8003eea:	657b      	str	r3, [r7, #84]	; 0x54
 8003eec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ef0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ef4:	f7fc f99e 	bl	8000234 <__aeabi_uldivmod>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4b61      	ldr	r3, [pc, #388]	; (8004084 <UART_SetConfig+0x2d4>)
 8003efe:	fba3 2302 	umull	r2, r3, r3, r2
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	011c      	lsls	r4, r3, #4
 8003f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f18:	4642      	mov	r2, r8
 8003f1a:	464b      	mov	r3, r9
 8003f1c:	1891      	adds	r1, r2, r2
 8003f1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f20:	415b      	adcs	r3, r3
 8003f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f28:	4641      	mov	r1, r8
 8003f2a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f2e:	4649      	mov	r1, r9
 8003f30:	eb43 0b01 	adc.w	fp, r3, r1
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f48:	4692      	mov	sl, r2
 8003f4a:	469b      	mov	fp, r3
 8003f4c:	4643      	mov	r3, r8
 8003f4e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f56:	464b      	mov	r3, r9
 8003f58:	eb4b 0303 	adc.w	r3, fp, r3
 8003f5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f74:	460b      	mov	r3, r1
 8003f76:	18db      	adds	r3, r3, r3
 8003f78:	643b      	str	r3, [r7, #64]	; 0x40
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	eb42 0303 	adc.w	r3, r2, r3
 8003f80:	647b      	str	r3, [r7, #68]	; 0x44
 8003f82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f8a:	f7fc f953 	bl	8000234 <__aeabi_uldivmod>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4611      	mov	r1, r2
 8003f94:	4b3b      	ldr	r3, [pc, #236]	; (8004084 <UART_SetConfig+0x2d4>)
 8003f96:	fba3 2301 	umull	r2, r3, r3, r1
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	2264      	movs	r2, #100	; 0x64
 8003f9e:	fb02 f303 	mul.w	r3, r2, r3
 8003fa2:	1acb      	subs	r3, r1, r3
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003faa:	4b36      	ldr	r3, [pc, #216]	; (8004084 <UART_SetConfig+0x2d4>)
 8003fac:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fb8:	441c      	add	r4, r3
 8003fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003fc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003fcc:	4642      	mov	r2, r8
 8003fce:	464b      	mov	r3, r9
 8003fd0:	1891      	adds	r1, r2, r2
 8003fd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fd4:	415b      	adcs	r3, r3
 8003fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fdc:	4641      	mov	r1, r8
 8003fde:	1851      	adds	r1, r2, r1
 8003fe0:	6339      	str	r1, [r7, #48]	; 0x30
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	414b      	adcs	r3, r1
 8003fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ff4:	4659      	mov	r1, fp
 8003ff6:	00cb      	lsls	r3, r1, #3
 8003ff8:	4651      	mov	r1, sl
 8003ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ffe:	4651      	mov	r1, sl
 8004000:	00ca      	lsls	r2, r1, #3
 8004002:	4610      	mov	r0, r2
 8004004:	4619      	mov	r1, r3
 8004006:	4603      	mov	r3, r0
 8004008:	4642      	mov	r2, r8
 800400a:	189b      	adds	r3, r3, r2
 800400c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004010:	464b      	mov	r3, r9
 8004012:	460a      	mov	r2, r1
 8004014:	eb42 0303 	adc.w	r3, r2, r3
 8004018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004028:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800402c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004030:	460b      	mov	r3, r1
 8004032:	18db      	adds	r3, r3, r3
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
 8004036:	4613      	mov	r3, r2
 8004038:	eb42 0303 	adc.w	r3, r2, r3
 800403c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800403e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004042:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004046:	f7fc f8f5 	bl	8000234 <__aeabi_uldivmod>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <UART_SetConfig+0x2d4>)
 8004050:	fba3 1302 	umull	r1, r3, r3, r2
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	2164      	movs	r1, #100	; 0x64
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	3332      	adds	r3, #50	; 0x32
 8004062:	4a08      	ldr	r2, [pc, #32]	; (8004084 <UART_SetConfig+0x2d4>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	095b      	lsrs	r3, r3, #5
 800406a:	f003 0207 	and.w	r2, r3, #7
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4422      	add	r2, r4
 8004076:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004078:	e106      	b.n	8004288 <UART_SetConfig+0x4d8>
 800407a:	bf00      	nop
 800407c:	40011000 	.word	0x40011000
 8004080:	40011400 	.word	0x40011400
 8004084:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800408c:	2200      	movs	r2, #0
 800408e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004092:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004096:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800409a:	4642      	mov	r2, r8
 800409c:	464b      	mov	r3, r9
 800409e:	1891      	adds	r1, r2, r2
 80040a0:	6239      	str	r1, [r7, #32]
 80040a2:	415b      	adcs	r3, r3
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
 80040a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040aa:	4641      	mov	r1, r8
 80040ac:	1854      	adds	r4, r2, r1
 80040ae:	4649      	mov	r1, r9
 80040b0:	eb43 0501 	adc.w	r5, r3, r1
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	00eb      	lsls	r3, r5, #3
 80040be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040c2:	00e2      	lsls	r2, r4, #3
 80040c4:	4614      	mov	r4, r2
 80040c6:	461d      	mov	r5, r3
 80040c8:	4643      	mov	r3, r8
 80040ca:	18e3      	adds	r3, r4, r3
 80040cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040d0:	464b      	mov	r3, r9
 80040d2:	eb45 0303 	adc.w	r3, r5, r3
 80040d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040f6:	4629      	mov	r1, r5
 80040f8:	008b      	lsls	r3, r1, #2
 80040fa:	4621      	mov	r1, r4
 80040fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004100:	4621      	mov	r1, r4
 8004102:	008a      	lsls	r2, r1, #2
 8004104:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004108:	f7fc f894 	bl	8000234 <__aeabi_uldivmod>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4b60      	ldr	r3, [pc, #384]	; (8004294 <UART_SetConfig+0x4e4>)
 8004112:	fba3 2302 	umull	r2, r3, r3, r2
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	011c      	lsls	r4, r3, #4
 800411a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800411e:	2200      	movs	r2, #0
 8004120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004124:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004128:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800412c:	4642      	mov	r2, r8
 800412e:	464b      	mov	r3, r9
 8004130:	1891      	adds	r1, r2, r2
 8004132:	61b9      	str	r1, [r7, #24]
 8004134:	415b      	adcs	r3, r3
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800413c:	4641      	mov	r1, r8
 800413e:	1851      	adds	r1, r2, r1
 8004140:	6139      	str	r1, [r7, #16]
 8004142:	4649      	mov	r1, r9
 8004144:	414b      	adcs	r3, r1
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004154:	4659      	mov	r1, fp
 8004156:	00cb      	lsls	r3, r1, #3
 8004158:	4651      	mov	r1, sl
 800415a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800415e:	4651      	mov	r1, sl
 8004160:	00ca      	lsls	r2, r1, #3
 8004162:	4610      	mov	r0, r2
 8004164:	4619      	mov	r1, r3
 8004166:	4603      	mov	r3, r0
 8004168:	4642      	mov	r2, r8
 800416a:	189b      	adds	r3, r3, r2
 800416c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004170:	464b      	mov	r3, r9
 8004172:	460a      	mov	r2, r1
 8004174:	eb42 0303 	adc.w	r3, r2, r3
 8004178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	67bb      	str	r3, [r7, #120]	; 0x78
 8004186:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004194:	4649      	mov	r1, r9
 8004196:	008b      	lsls	r3, r1, #2
 8004198:	4641      	mov	r1, r8
 800419a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800419e:	4641      	mov	r1, r8
 80041a0:	008a      	lsls	r2, r1, #2
 80041a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80041a6:	f7fc f845 	bl	8000234 <__aeabi_uldivmod>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4611      	mov	r1, r2
 80041b0:	4b38      	ldr	r3, [pc, #224]	; (8004294 <UART_SetConfig+0x4e4>)
 80041b2:	fba3 2301 	umull	r2, r3, r3, r1
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	2264      	movs	r2, #100	; 0x64
 80041ba:	fb02 f303 	mul.w	r3, r2, r3
 80041be:	1acb      	subs	r3, r1, r3
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	3332      	adds	r3, #50	; 0x32
 80041c4:	4a33      	ldr	r2, [pc, #204]	; (8004294 <UART_SetConfig+0x4e4>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041d0:	441c      	add	r4, r3
 80041d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041d6:	2200      	movs	r2, #0
 80041d8:	673b      	str	r3, [r7, #112]	; 0x70
 80041da:	677a      	str	r2, [r7, #116]	; 0x74
 80041dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041e0:	4642      	mov	r2, r8
 80041e2:	464b      	mov	r3, r9
 80041e4:	1891      	adds	r1, r2, r2
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	415b      	adcs	r3, r3
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041f0:	4641      	mov	r1, r8
 80041f2:	1851      	adds	r1, r2, r1
 80041f4:	6039      	str	r1, [r7, #0]
 80041f6:	4649      	mov	r1, r9
 80041f8:	414b      	adcs	r3, r1
 80041fa:	607b      	str	r3, [r7, #4]
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004208:	4659      	mov	r1, fp
 800420a:	00cb      	lsls	r3, r1, #3
 800420c:	4651      	mov	r1, sl
 800420e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004212:	4651      	mov	r1, sl
 8004214:	00ca      	lsls	r2, r1, #3
 8004216:	4610      	mov	r0, r2
 8004218:	4619      	mov	r1, r3
 800421a:	4603      	mov	r3, r0
 800421c:	4642      	mov	r2, r8
 800421e:	189b      	adds	r3, r3, r2
 8004220:	66bb      	str	r3, [r7, #104]	; 0x68
 8004222:	464b      	mov	r3, r9
 8004224:	460a      	mov	r2, r1
 8004226:	eb42 0303 	adc.w	r3, r2, r3
 800422a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	663b      	str	r3, [r7, #96]	; 0x60
 8004236:	667a      	str	r2, [r7, #100]	; 0x64
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004244:	4649      	mov	r1, r9
 8004246:	008b      	lsls	r3, r1, #2
 8004248:	4641      	mov	r1, r8
 800424a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800424e:	4641      	mov	r1, r8
 8004250:	008a      	lsls	r2, r1, #2
 8004252:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004256:	f7fb ffed 	bl	8000234 <__aeabi_uldivmod>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <UART_SetConfig+0x4e4>)
 8004260:	fba3 1302 	umull	r1, r3, r3, r2
 8004264:	095b      	lsrs	r3, r3, #5
 8004266:	2164      	movs	r1, #100	; 0x64
 8004268:	fb01 f303 	mul.w	r3, r1, r3
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	3332      	adds	r3, #50	; 0x32
 8004272:	4a08      	ldr	r2, [pc, #32]	; (8004294 <UART_SetConfig+0x4e4>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	f003 020f 	and.w	r2, r3, #15
 800427e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4422      	add	r2, r4
 8004286:	609a      	str	r2, [r3, #8]
}
 8004288:	bf00      	nop
 800428a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800428e:	46bd      	mov	sp, r7
 8004290:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004294:	51eb851f 	.word	0x51eb851f

08004298 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80042a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042aa:	2b84      	cmp	r3, #132	; 0x84
 80042ac:	d005      	beq.n	80042ba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80042ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4413      	add	r3, r2
 80042b6:	3303      	adds	r3, #3
 80042b8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80042ba:	68fb      	ldr	r3, [r7, #12]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80042cc:	f000 fe1e 	bl	8004f0c <vTaskStartScheduler>
  
  return osOK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80042d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042d8:	b089      	sub	sp, #36	; 0x24
 80042da:	af04      	add	r7, sp, #16
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d020      	beq.n	800432a <osThreadCreate+0x54>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01c      	beq.n	800432a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685c      	ldr	r4, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691e      	ldr	r6, [r3, #16]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff ffc8 	bl	8004298 <makeFreeRtosPriority>
 8004308:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004312:	9202      	str	r2, [sp, #8]
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	9100      	str	r1, [sp, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	4632      	mov	r2, r6
 800431c:	4629      	mov	r1, r5
 800431e:	4620      	mov	r0, r4
 8004320:	f000 fc2c 	bl	8004b7c <xTaskCreateStatic>
 8004324:	4603      	mov	r3, r0
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	e01c      	b.n	8004364 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685c      	ldr	r4, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004336:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ffaa 	bl	8004298 <makeFreeRtosPriority>
 8004344:	4602      	mov	r2, r0
 8004346:	f107 030c 	add.w	r3, r7, #12
 800434a:	9301      	str	r3, [sp, #4]
 800434c:	9200      	str	r2, [sp, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	4632      	mov	r2, r6
 8004352:	4629      	mov	r1, r5
 8004354:	4620      	mov	r0, r4
 8004356:	f000 fc6e 	bl	8004c36 <xTaskCreate>
 800435a:	4603      	mov	r3, r0
 800435c:	2b01      	cmp	r3, #1
 800435e:	d001      	beq.n	8004364 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004360:	2300      	movs	r3, #0
 8004362:	e000      	b.n	8004366 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004364:	68fb      	ldr	r3, [r7, #12]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800436e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <osDelay+0x16>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	e000      	b.n	8004386 <osDelay+0x18>
 8004384:	2301      	movs	r3, #1
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fd8c 	bl	8004ea4 <vTaskDelay>
  
  return osOK;
 800438c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004396:	b580      	push	{r7, lr}
 8004398:	b086      	sub	sp, #24
 800439a:	af02      	add	r7, sp, #8
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00f      	beq.n	80043c8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d10a      	bne.n	80043c4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2203      	movs	r2, #3
 80043b4:	9200      	str	r2, [sp, #0]
 80043b6:	2200      	movs	r2, #0
 80043b8:	2100      	movs	r1, #0
 80043ba:	2001      	movs	r0, #1
 80043bc:	f000 f93a 	bl	8004634 <xQueueGenericCreateStatic>
 80043c0:	4603      	mov	r3, r0
 80043c2:	e016      	b.n	80043f2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e014      	b.n	80043f2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d110      	bne.n	80043f0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80043ce:	2203      	movs	r2, #3
 80043d0:	2100      	movs	r1, #0
 80043d2:	2001      	movs	r0, #1
 80043d4:	f000 f9a6 	bl	8004724 <xQueueGenericCreate>
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <osSemaphoreCreate+0x56>
 80043e0:	2300      	movs	r3, #0
 80043e2:	2200      	movs	r2, #0
 80043e4:	2100      	movs	r1, #0
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f9f6 	bl	80047d8 <xQueueGenericSend>
      return sema;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	e000      	b.n	80043f2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80043f0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f103 0208 	add.w	r2, r3, #8
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f04f 32ff 	mov.w	r2, #4294967295
 8004412:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f103 0208 	add.w	r2, r3, #8
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f103 0208 	add.w	r2, r3, #8
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	601a      	str	r2, [r3, #0]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b2:	d103      	bne.n	80044bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	e00c      	b.n	80044d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3308      	adds	r3, #8
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	e002      	b.n	80044ca <vListInsert+0x2e>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d2f6      	bcs.n	80044c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	601a      	str	r2, [r3, #0]
}
 8004502:	bf00      	nop
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800450e:	b480      	push	{r7}
 8004510:	b085      	sub	sp, #20
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6892      	ldr	r2, [r2, #8]
 8004524:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6852      	ldr	r2, [r2, #4]
 800452e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	429a      	cmp	r2, r3
 8004538:	d103      	bne.n	8004542 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	1e5a      	subs	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
	...

08004564 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800458a:	bf00      	nop
 800458c:	e7fe      	b.n	800458c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800458e:	f001 faf1 	bl	8005b74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459a:	68f9      	ldr	r1, [r7, #12]
 800459c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800459e:	fb01 f303 	mul.w	r3, r1, r3
 80045a2:	441a      	add	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045be:	3b01      	subs	r3, #1
 80045c0:	68f9      	ldr	r1, [r7, #12]
 80045c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	441a      	add	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	22ff      	movs	r2, #255	; 0xff
 80045d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	22ff      	movs	r2, #255	; 0xff
 80045da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d114      	bne.n	800460e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d01a      	beq.n	8004622 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3310      	adds	r3, #16
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fecd 	bl	8005390 <xTaskRemoveFromEventList>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d012      	beq.n	8004622 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <xQueueGenericReset+0xcc>)
 80045fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	e009      	b.n	8004622 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3310      	adds	r3, #16
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fef1 	bl	80043fa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3324      	adds	r3, #36	; 0x24
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff feec 	bl	80043fa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004622:	f001 fad7 	bl	8005bd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004626:	2301      	movs	r3, #1
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	e000ed04 	.word	0xe000ed04

08004634 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08e      	sub	sp, #56	; 0x38
 8004638:	af02      	add	r7, sp, #8
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800465a:	bf00      	nop
 800465c:	e7fe      	b.n	800465c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004676:	bf00      	nop
 8004678:	e7fe      	b.n	8004678 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <xQueueGenericCreateStatic+0x52>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <xQueueGenericCreateStatic+0x56>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <xQueueGenericCreateStatic+0x58>
 800468a:	2300      	movs	r3, #0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10a      	bne.n	80046a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	623b      	str	r3, [r7, #32]
}
 80046a2:	bf00      	nop
 80046a4:	e7fe      	b.n	80046a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <xQueueGenericCreateStatic+0x7e>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <xQueueGenericCreateStatic+0x82>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <xQueueGenericCreateStatic+0x84>
 80046b6:	2300      	movs	r3, #0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	61fb      	str	r3, [r7, #28]
}
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046d2:	2348      	movs	r3, #72	; 0x48
 80046d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b48      	cmp	r3, #72	; 0x48
 80046da:	d00a      	beq.n	80046f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	61bb      	str	r3, [r7, #24]
}
 80046ee:	bf00      	nop
 80046f0:	e7fe      	b.n	80046f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80046f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80046f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00d      	beq.n	800471a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004706:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	4613      	mov	r3, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f83f 	bl	8004798 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800471c:	4618      	mov	r0, r3
 800471e:	3730      	adds	r7, #48	; 0x30
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08a      	sub	sp, #40	; 0x28
 8004728:	af02      	add	r7, sp, #8
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	4613      	mov	r3, r2
 8004730:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	613b      	str	r3, [r7, #16]
}
 800474a:	bf00      	nop
 800474c:	e7fe      	b.n	800474c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	3348      	adds	r3, #72	; 0x48
 800475c:	4618      	mov	r0, r3
 800475e:	f001 faeb 	bl	8005d38 <pvPortMalloc>
 8004762:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d011      	beq.n	800478e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	3348      	adds	r3, #72	; 0x48
 8004772:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800477c:	79fa      	ldrb	r2, [r7, #7]
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	4613      	mov	r3, r2
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	68b9      	ldr	r1, [r7, #8]
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f805 	bl	8004798 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800478e:	69bb      	ldr	r3, [r7, #24]
	}
 8004790:	4618      	mov	r0, r3
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d103      	bne.n	80047b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	e002      	b.n	80047ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047c6:	2101      	movs	r1, #1
 80047c8:	69b8      	ldr	r0, [r7, #24]
 80047ca:	f7ff fecb 	bl	8004564 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80047ce:	bf00      	nop
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08e      	sub	sp, #56	; 0x38
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80047e6:	2300      	movs	r3, #0
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <xQueueGenericSend+0x32>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004806:	bf00      	nop
 8004808:	e7fe      	b.n	8004808 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d103      	bne.n	8004818 <xQueueGenericSend+0x40>
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <xQueueGenericSend+0x44>
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <xQueueGenericSend+0x46>
 800481c:	2300      	movs	r3, #0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10a      	bne.n	8004838 <xQueueGenericSend+0x60>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004834:	bf00      	nop
 8004836:	e7fe      	b.n	8004836 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d103      	bne.n	8004846 <xQueueGenericSend+0x6e>
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004842:	2b01      	cmp	r3, #1
 8004844:	d101      	bne.n	800484a <xQueueGenericSend+0x72>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <xQueueGenericSend+0x74>
 800484a:	2300      	movs	r3, #0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10a      	bne.n	8004866 <xQueueGenericSend+0x8e>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	623b      	str	r3, [r7, #32]
}
 8004862:	bf00      	nop
 8004864:	e7fe      	b.n	8004864 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004866:	f000 ff4f 	bl	8005708 <xTaskGetSchedulerState>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d102      	bne.n	8004876 <xQueueGenericSend+0x9e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <xQueueGenericSend+0xa2>
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <xQueueGenericSend+0xa4>
 800487a:	2300      	movs	r3, #0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <xQueueGenericSend+0xbe>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	61fb      	str	r3, [r7, #28]
}
 8004892:	bf00      	nop
 8004894:	e7fe      	b.n	8004894 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004896:	f001 f96d 	bl	8005b74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800489e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d302      	bcc.n	80048ac <xQueueGenericSend+0xd4>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d129      	bne.n	8004900 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048b2:	f000 f88f 	bl	80049d4 <prvCopyDataToQueue>
 80048b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d010      	beq.n	80048e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c2:	3324      	adds	r3, #36	; 0x24
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fd63 	bl	8005390 <xTaskRemoveFromEventList>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d013      	beq.n	80048f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048d0:	4b3f      	ldr	r3, [pc, #252]	; (80049d0 <xQueueGenericSend+0x1f8>)
 80048d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	e00a      	b.n	80048f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d007      	beq.n	80048f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048e8:	4b39      	ldr	r3, [pc, #228]	; (80049d0 <xQueueGenericSend+0x1f8>)
 80048ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048f8:	f001 f96c 	bl	8005bd4 <vPortExitCritical>
				return pdPASS;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e063      	b.n	80049c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d103      	bne.n	800490e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004906:	f001 f965 	bl	8005bd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800490a:	2300      	movs	r3, #0
 800490c:	e05c      	b.n	80049c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800490e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004910:	2b00      	cmp	r3, #0
 8004912:	d106      	bne.n	8004922 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004914:	f107 0314 	add.w	r3, r7, #20
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fd9b 	bl	8005454 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800491e:	2301      	movs	r3, #1
 8004920:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004922:	f001 f957 	bl	8005bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004926:	f000 fb51 	bl	8004fcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800492a:	f001 f923 	bl	8005b74 <vPortEnterCritical>
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004934:	b25b      	sxtb	r3, r3
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d103      	bne.n	8004944 <xQueueGenericSend+0x16c>
 800493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800494a:	b25b      	sxtb	r3, r3
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d103      	bne.n	800495a <xQueueGenericSend+0x182>
 8004952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800495a:	f001 f93b 	bl	8005bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800495e:	1d3a      	adds	r2, r7, #4
 8004960:	f107 0314 	add.w	r3, r7, #20
 8004964:	4611      	mov	r1, r2
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fd8a 	bl	8005480 <xTaskCheckForTimeOut>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d124      	bne.n	80049bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004974:	f000 f8ea 	bl	8004b4c <prvIsQueueFull>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d018      	beq.n	80049b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	3310      	adds	r3, #16
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	4611      	mov	r1, r2
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fcde 	bl	8005348 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800498c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800498e:	f000 f88b 	bl	8004aa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004992:	f000 fb29 	bl	8004fe8 <xTaskResumeAll>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	f47f af7c 	bne.w	8004896 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800499e:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <xQueueGenericSend+0x1f8>)
 80049a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	e772      	b.n	8004896 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049b2:	f000 f879 	bl	8004aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049b6:	f000 fb17 	bl	8004fe8 <xTaskResumeAll>
 80049ba:	e76c      	b.n	8004896 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049be:	f000 f873 	bl	8004aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049c2:	f000 fb11 	bl	8004fe8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3738      	adds	r7, #56	; 0x38
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	e000ed04 	.word	0xe000ed04

080049d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10d      	bne.n	8004a0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d14d      	bne.n	8004a96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fea0 	bl	8005744 <xTaskPriorityDisinherit>
 8004a04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	609a      	str	r2, [r3, #8]
 8004a0c:	e043      	b.n	8004a96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d119      	bne.n	8004a48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6858      	ldr	r0, [r3, #4]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	f001 fc7c 	bl	800631c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	441a      	add	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d32b      	bcc.n	8004a96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	605a      	str	r2, [r3, #4]
 8004a46:	e026      	b.n	8004a96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	68d8      	ldr	r0, [r3, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	461a      	mov	r2, r3
 8004a52:	68b9      	ldr	r1, [r7, #8]
 8004a54:	f001 fc62 	bl	800631c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	425b      	negs	r3, r3
 8004a62:	441a      	add	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d207      	bcs.n	8004a84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	425b      	negs	r3, r3
 8004a7e:	441a      	add	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d105      	bne.n	8004a96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1c5a      	adds	r2, r3, #1
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a9e:	697b      	ldr	r3, [r7, #20]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ab0:	f001 f860 	bl	8005b74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004abc:	e011      	b.n	8004ae2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d012      	beq.n	8004aec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3324      	adds	r3, #36	; 0x24
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fc60 	bl	8005390 <xTaskRemoveFromEventList>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ad6:	f000 fd35 	bl	8005544 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	dce9      	bgt.n	8004abe <prvUnlockQueue+0x16>
 8004aea:	e000      	b.n	8004aee <prvUnlockQueue+0x46>
					break;
 8004aec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	22ff      	movs	r2, #255	; 0xff
 8004af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004af6:	f001 f86d 	bl	8005bd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004afa:	f001 f83b 	bl	8005b74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b06:	e011      	b.n	8004b2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d012      	beq.n	8004b36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3310      	adds	r3, #16
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fc3b 	bl	8005390 <xTaskRemoveFromEventList>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b20:	f000 fd10 	bl	8005544 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b24:	7bbb      	ldrb	r3, [r7, #14]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	dce9      	bgt.n	8004b08 <prvUnlockQueue+0x60>
 8004b34:	e000      	b.n	8004b38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	22ff      	movs	r2, #255	; 0xff
 8004b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b40:	f001 f848 	bl	8005bd4 <vPortExitCritical>
}
 8004b44:	bf00      	nop
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b54:	f001 f80e 	bl	8005b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d102      	bne.n	8004b6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b64:	2301      	movs	r3, #1
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	e001      	b.n	8004b6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b6e:	f001 f831 	bl	8005bd4 <vPortExitCritical>

	return xReturn;
 8004b72:	68fb      	ldr	r3, [r7, #12]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08e      	sub	sp, #56	; 0x38
 8004b80:	af04      	add	r7, sp, #16
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10a      	bne.n	8004ba6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	623b      	str	r3, [r7, #32]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <xTaskCreateStatic+0x46>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	61fb      	str	r3, [r7, #28]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004bc2:	2354      	movs	r3, #84	; 0x54
 8004bc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b54      	cmp	r3, #84	; 0x54
 8004bca:	d00a      	beq.n	8004be2 <xTaskCreateStatic+0x66>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	61bb      	str	r3, [r7, #24]
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004be2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01e      	beq.n	8004c28 <xTaskCreateStatic+0xac>
 8004bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01b      	beq.n	8004c28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c02:	2300      	movs	r3, #0
 8004c04:	9303      	str	r3, [sp, #12]
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	9302      	str	r3, [sp, #8]
 8004c0a:	f107 0314 	add.w	r3, r7, #20
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f850 	bl	8004cc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c22:	f000 f8d5 	bl	8004dd0 <prvAddNewTaskToReadyList>
 8004c26:	e001      	b.n	8004c2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c2c:	697b      	ldr	r3, [r7, #20]
	}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3728      	adds	r7, #40	; 0x28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b08c      	sub	sp, #48	; 0x30
 8004c3a:	af04      	add	r7, sp, #16
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	603b      	str	r3, [r7, #0]
 8004c42:	4613      	mov	r3, r2
 8004c44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f001 f874 	bl	8005d38 <pvPortMalloc>
 8004c50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00e      	beq.n	8004c76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c58:	2054      	movs	r0, #84	; 0x54
 8004c5a:	f001 f86d 	bl	8005d38 <pvPortMalloc>
 8004c5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8004c6c:	e005      	b.n	8004c7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c6e:	6978      	ldr	r0, [r7, #20]
 8004c70:	f001 f92e 	bl	8005ed0 <vPortFree>
 8004c74:	e001      	b.n	8004c7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d017      	beq.n	8004cb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c88:	88fa      	ldrh	r2, [r7, #6]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	9303      	str	r3, [sp, #12]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	9302      	str	r3, [sp, #8]
 8004c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f80e 	bl	8004cc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ca4:	69f8      	ldr	r0, [r7, #28]
 8004ca6:	f000 f893 	bl	8004dd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004caa:	2301      	movs	r3, #1
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	e002      	b.n	8004cb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
	}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f023 0307 	bic.w	r3, r3, #7
 8004ce6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	617b      	str	r3, [r7, #20]
}
 8004d04:	bf00      	nop
 8004d06:	e7fe      	b.n	8004d06 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d01f      	beq.n	8004d4e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	e012      	b.n	8004d3a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	4413      	add	r3, r2
 8004d1a:	7819      	ldrb	r1, [r3, #0]
 8004d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	4413      	add	r3, r2
 8004d22:	3334      	adds	r3, #52	; 0x34
 8004d24:	460a      	mov	r2, r1
 8004d26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d006      	beq.n	8004d42 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	3301      	adds	r3, #1
 8004d38:	61fb      	str	r3, [r7, #28]
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	2b0f      	cmp	r3, #15
 8004d3e:	d9e9      	bls.n	8004d14 <prvInitialiseNewTask+0x54>
 8004d40:	e000      	b.n	8004d44 <prvInitialiseNewTask+0x84>
			{
				break;
 8004d42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d4c:	e003      	b.n	8004d56 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	2b06      	cmp	r3, #6
 8004d5a:	d901      	bls.n	8004d60 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d5c:	2306      	movs	r3, #6
 8004d5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d6a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	2200      	movs	r2, #0
 8004d70:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	3304      	adds	r3, #4
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff fb5f 	bl	800443a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	3318      	adds	r3, #24
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff fb5a 	bl	800443a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	f1c3 0207 	rsb	r2, r3, #7
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9e:	2200      	movs	r2, #0
 8004da0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	68f9      	ldr	r1, [r7, #12]
 8004dae:	69b8      	ldr	r0, [r7, #24]
 8004db0:	f000 fdb4 	bl	800591c <pxPortInitialiseStack>
 8004db4:	4602      	mov	r2, r0
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dc6:	bf00      	nop
 8004dc8:	3720      	adds	r7, #32
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004dd8:	f000 fecc 	bl	8005b74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ddc:	4b2a      	ldr	r3, [pc, #168]	; (8004e88 <prvAddNewTaskToReadyList+0xb8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3301      	adds	r3, #1
 8004de2:	4a29      	ldr	r2, [pc, #164]	; (8004e88 <prvAddNewTaskToReadyList+0xb8>)
 8004de4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004de6:	4b29      	ldr	r3, [pc, #164]	; (8004e8c <prvAddNewTaskToReadyList+0xbc>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d109      	bne.n	8004e02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dee:	4a27      	ldr	r2, [pc, #156]	; (8004e8c <prvAddNewTaskToReadyList+0xbc>)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004df4:	4b24      	ldr	r3, [pc, #144]	; (8004e88 <prvAddNewTaskToReadyList+0xb8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d110      	bne.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004dfc:	f000 fbc6 	bl	800558c <prvInitialiseTaskLists>
 8004e00:	e00d      	b.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e02:	4b23      	ldr	r3, [pc, #140]	; (8004e90 <prvAddNewTaskToReadyList+0xc0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e0a:	4b20      	ldr	r3, [pc, #128]	; (8004e8c <prvAddNewTaskToReadyList+0xbc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d802      	bhi.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e18:	4a1c      	ldr	r2, [pc, #112]	; (8004e8c <prvAddNewTaskToReadyList+0xbc>)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e1e:	4b1d      	ldr	r3, [pc, #116]	; (8004e94 <prvAddNewTaskToReadyList+0xc4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3301      	adds	r3, #1
 8004e24:	4a1b      	ldr	r2, [pc, #108]	; (8004e94 <prvAddNewTaskToReadyList+0xc4>)
 8004e26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	4b19      	ldr	r3, [pc, #100]	; (8004e98 <prvAddNewTaskToReadyList+0xc8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <prvAddNewTaskToReadyList+0xc8>)
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4a15      	ldr	r2, [pc, #84]	; (8004e9c <prvAddNewTaskToReadyList+0xcc>)
 8004e48:	441a      	add	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4610      	mov	r0, r2
 8004e52:	f7ff faff 	bl	8004454 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e56:	f000 febd 	bl	8005bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e5a:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <prvAddNewTaskToReadyList+0xc0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00e      	beq.n	8004e80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <prvAddNewTaskToReadyList+0xbc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d207      	bcs.n	8004e80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <prvAddNewTaskToReadyList+0xd0>)
 8004e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	200008f0 	.word	0x200008f0
 8004e8c:	200007f0 	.word	0x200007f0
 8004e90:	200008fc 	.word	0x200008fc
 8004e94:	2000090c 	.word	0x2000090c
 8004e98:	200008f8 	.word	0x200008f8
 8004e9c:	200007f4 	.word	0x200007f4
 8004ea0:	e000ed04 	.word	0xe000ed04

08004ea4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d017      	beq.n	8004ee6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004eb6:	4b13      	ldr	r3, [pc, #76]	; (8004f04 <vTaskDelay+0x60>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <vTaskDelay+0x30>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	60bb      	str	r3, [r7, #8]
}
 8004ed0:	bf00      	nop
 8004ed2:	e7fe      	b.n	8004ed2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ed4:	f000 f87a 	bl	8004fcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ed8:	2100      	movs	r1, #0
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fcb8 	bl	8005850 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ee0:	f000 f882 	bl	8004fe8 <xTaskResumeAll>
 8004ee4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d107      	bne.n	8004efc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004eec:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <vTaskDelay+0x64>)
 8004eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004efc:	bf00      	nop
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	20000918 	.word	0x20000918
 8004f08:	e000ed04 	.word	0xe000ed04

08004f0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08a      	sub	sp, #40	; 0x28
 8004f10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f1a:	463a      	mov	r2, r7
 8004f1c:	1d39      	adds	r1, r7, #4
 8004f1e:	f107 0308 	add.w	r3, r7, #8
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fb fcb8 	bl	8000898 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f28:	6839      	ldr	r1, [r7, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	9202      	str	r2, [sp, #8]
 8004f30:	9301      	str	r3, [sp, #4]
 8004f32:	2300      	movs	r3, #0
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	2300      	movs	r3, #0
 8004f38:	460a      	mov	r2, r1
 8004f3a:	491e      	ldr	r1, [pc, #120]	; (8004fb4 <vTaskStartScheduler+0xa8>)
 8004f3c:	481e      	ldr	r0, [pc, #120]	; (8004fb8 <vTaskStartScheduler+0xac>)
 8004f3e:	f7ff fe1d 	bl	8004b7c <xTaskCreateStatic>
 8004f42:	4603      	mov	r3, r0
 8004f44:	4a1d      	ldr	r2, [pc, #116]	; (8004fbc <vTaskStartScheduler+0xb0>)
 8004f46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f48:	4b1c      	ldr	r3, [pc, #112]	; (8004fbc <vTaskStartScheduler+0xb0>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f50:	2301      	movs	r3, #1
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	e001      	b.n	8004f5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d116      	bne.n	8004f8e <vTaskStartScheduler+0x82>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	613b      	str	r3, [r7, #16]
}
 8004f72:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f74:	4b12      	ldr	r3, [pc, #72]	; (8004fc0 <vTaskStartScheduler+0xb4>)
 8004f76:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f7c:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <vTaskStartScheduler+0xb8>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f82:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <vTaskStartScheduler+0xbc>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f88:	f000 fd52 	bl	8005a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f8c:	e00e      	b.n	8004fac <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f94:	d10a      	bne.n	8004fac <vTaskStartScheduler+0xa0>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	60fb      	str	r3, [r7, #12]
}
 8004fa8:	bf00      	nop
 8004faa:	e7fe      	b.n	8004faa <vTaskStartScheduler+0x9e>
}
 8004fac:	bf00      	nop
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	08006418 	.word	0x08006418
 8004fb8:	0800555d 	.word	0x0800555d
 8004fbc:	20000914 	.word	0x20000914
 8004fc0:	20000910 	.word	0x20000910
 8004fc4:	200008fc 	.word	0x200008fc
 8004fc8:	200008f4 	.word	0x200008f4

08004fcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004fd0:	4b04      	ldr	r3, [pc, #16]	; (8004fe4 <vTaskSuspendAll+0x18>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	4a03      	ldr	r2, [pc, #12]	; (8004fe4 <vTaskSuspendAll+0x18>)
 8004fd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004fda:	bf00      	nop
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	20000918 	.word	0x20000918

08004fe8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ff6:	4b41      	ldr	r3, [pc, #260]	; (80050fc <xTaskResumeAll+0x114>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <xTaskResumeAll+0x2c>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	603b      	str	r3, [r7, #0]
}
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005014:	f000 fdae 	bl	8005b74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005018:	4b38      	ldr	r3, [pc, #224]	; (80050fc <xTaskResumeAll+0x114>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3b01      	subs	r3, #1
 800501e:	4a37      	ldr	r2, [pc, #220]	; (80050fc <xTaskResumeAll+0x114>)
 8005020:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005022:	4b36      	ldr	r3, [pc, #216]	; (80050fc <xTaskResumeAll+0x114>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d161      	bne.n	80050ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800502a:	4b35      	ldr	r3, [pc, #212]	; (8005100 <xTaskResumeAll+0x118>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d05d      	beq.n	80050ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005032:	e02e      	b.n	8005092 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005034:	4b33      	ldr	r3, [pc, #204]	; (8005104 <xTaskResumeAll+0x11c>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3318      	adds	r3, #24
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fa64 	bl	800450e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3304      	adds	r3, #4
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff fa5f 	bl	800450e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	2201      	movs	r2, #1
 8005056:	409a      	lsls	r2, r3
 8005058:	4b2b      	ldr	r3, [pc, #172]	; (8005108 <xTaskResumeAll+0x120>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4313      	orrs	r3, r2
 800505e:	4a2a      	ldr	r2, [pc, #168]	; (8005108 <xTaskResumeAll+0x120>)
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4a27      	ldr	r2, [pc, #156]	; (800510c <xTaskResumeAll+0x124>)
 8005070:	441a      	add	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	3304      	adds	r3, #4
 8005076:	4619      	mov	r1, r3
 8005078:	4610      	mov	r0, r2
 800507a:	f7ff f9eb 	bl	8004454 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005082:	4b23      	ldr	r3, [pc, #140]	; (8005110 <xTaskResumeAll+0x128>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	429a      	cmp	r2, r3
 800508a:	d302      	bcc.n	8005092 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800508c:	4b21      	ldr	r3, [pc, #132]	; (8005114 <xTaskResumeAll+0x12c>)
 800508e:	2201      	movs	r2, #1
 8005090:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005092:	4b1c      	ldr	r3, [pc, #112]	; (8005104 <xTaskResumeAll+0x11c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1cc      	bne.n	8005034 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050a0:	f000 fb12 	bl	80056c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80050a4:	4b1c      	ldr	r3, [pc, #112]	; (8005118 <xTaskResumeAll+0x130>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d010      	beq.n	80050d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050b0:	f000 f836 	bl	8005120 <xTaskIncrementTick>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80050ba:	4b16      	ldr	r3, [pc, #88]	; (8005114 <xTaskResumeAll+0x12c>)
 80050bc:	2201      	movs	r2, #1
 80050be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1f1      	bne.n	80050b0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80050cc:	4b12      	ldr	r3, [pc, #72]	; (8005118 <xTaskResumeAll+0x130>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050d2:	4b10      	ldr	r3, [pc, #64]	; (8005114 <xTaskResumeAll+0x12c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d009      	beq.n	80050ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050da:	2301      	movs	r3, #1
 80050dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050de:	4b0f      	ldr	r3, [pc, #60]	; (800511c <xTaskResumeAll+0x134>)
 80050e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050ee:	f000 fd71 	bl	8005bd4 <vPortExitCritical>

	return xAlreadyYielded;
 80050f2:	68bb      	ldr	r3, [r7, #8]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	20000918 	.word	0x20000918
 8005100:	200008f0 	.word	0x200008f0
 8005104:	200008b0 	.word	0x200008b0
 8005108:	200008f8 	.word	0x200008f8
 800510c:	200007f4 	.word	0x200007f4
 8005110:	200007f0 	.word	0x200007f0
 8005114:	20000904 	.word	0x20000904
 8005118:	20000900 	.word	0x20000900
 800511c:	e000ed04 	.word	0xe000ed04

08005120 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800512a:	4b4e      	ldr	r3, [pc, #312]	; (8005264 <xTaskIncrementTick+0x144>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	f040 808e 	bne.w	8005250 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005134:	4b4c      	ldr	r3, [pc, #304]	; (8005268 <xTaskIncrementTick+0x148>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3301      	adds	r3, #1
 800513a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800513c:	4a4a      	ldr	r2, [pc, #296]	; (8005268 <xTaskIncrementTick+0x148>)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d120      	bne.n	800518a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005148:	4b48      	ldr	r3, [pc, #288]	; (800526c <xTaskIncrementTick+0x14c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <xTaskIncrementTick+0x48>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	603b      	str	r3, [r7, #0]
}
 8005164:	bf00      	nop
 8005166:	e7fe      	b.n	8005166 <xTaskIncrementTick+0x46>
 8005168:	4b40      	ldr	r3, [pc, #256]	; (800526c <xTaskIncrementTick+0x14c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	4b40      	ldr	r3, [pc, #256]	; (8005270 <xTaskIncrementTick+0x150>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a3e      	ldr	r2, [pc, #248]	; (800526c <xTaskIncrementTick+0x14c>)
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	4a3e      	ldr	r2, [pc, #248]	; (8005270 <xTaskIncrementTick+0x150>)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	4b3d      	ldr	r3, [pc, #244]	; (8005274 <xTaskIncrementTick+0x154>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3301      	adds	r3, #1
 8005182:	4a3c      	ldr	r2, [pc, #240]	; (8005274 <xTaskIncrementTick+0x154>)
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	f000 fa9f 	bl	80056c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800518a:	4b3b      	ldr	r3, [pc, #236]	; (8005278 <xTaskIncrementTick+0x158>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	429a      	cmp	r2, r3
 8005192:	d348      	bcc.n	8005226 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005194:	4b35      	ldr	r3, [pc, #212]	; (800526c <xTaskIncrementTick+0x14c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d104      	bne.n	80051a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800519e:	4b36      	ldr	r3, [pc, #216]	; (8005278 <xTaskIncrementTick+0x158>)
 80051a0:	f04f 32ff 	mov.w	r2, #4294967295
 80051a4:	601a      	str	r2, [r3, #0]
					break;
 80051a6:	e03e      	b.n	8005226 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051a8:	4b30      	ldr	r3, [pc, #192]	; (800526c <xTaskIncrementTick+0x14c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d203      	bcs.n	80051c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051c0:	4a2d      	ldr	r2, [pc, #180]	; (8005278 <xTaskIncrementTick+0x158>)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051c6:	e02e      	b.n	8005226 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff f99e 	bl	800450e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d004      	beq.n	80051e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	3318      	adds	r3, #24
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff f995 	bl	800450e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	2201      	movs	r2, #1
 80051ea:	409a      	lsls	r2, r3
 80051ec:	4b23      	ldr	r3, [pc, #140]	; (800527c <xTaskIncrementTick+0x15c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	4a22      	ldr	r2, [pc, #136]	; (800527c <xTaskIncrementTick+0x15c>)
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4a1f      	ldr	r2, [pc, #124]	; (8005280 <xTaskIncrementTick+0x160>)
 8005204:	441a      	add	r2, r3
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	3304      	adds	r3, #4
 800520a:	4619      	mov	r1, r3
 800520c:	4610      	mov	r0, r2
 800520e:	f7ff f921 	bl	8004454 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005216:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <xTaskIncrementTick+0x164>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	429a      	cmp	r2, r3
 800521e:	d3b9      	bcc.n	8005194 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005220:	2301      	movs	r3, #1
 8005222:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005224:	e7b6      	b.n	8005194 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005226:	4b17      	ldr	r3, [pc, #92]	; (8005284 <xTaskIncrementTick+0x164>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522c:	4914      	ldr	r1, [pc, #80]	; (8005280 <xTaskIncrementTick+0x160>)
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	440b      	add	r3, r1
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d901      	bls.n	8005242 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800523e:	2301      	movs	r3, #1
 8005240:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005242:	4b11      	ldr	r3, [pc, #68]	; (8005288 <xTaskIncrementTick+0x168>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d007      	beq.n	800525a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800524a:	2301      	movs	r3, #1
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	e004      	b.n	800525a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005250:	4b0e      	ldr	r3, [pc, #56]	; (800528c <xTaskIncrementTick+0x16c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3301      	adds	r3, #1
 8005256:	4a0d      	ldr	r2, [pc, #52]	; (800528c <xTaskIncrementTick+0x16c>)
 8005258:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800525a:	697b      	ldr	r3, [r7, #20]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	20000918 	.word	0x20000918
 8005268:	200008f4 	.word	0x200008f4
 800526c:	200008a8 	.word	0x200008a8
 8005270:	200008ac 	.word	0x200008ac
 8005274:	20000908 	.word	0x20000908
 8005278:	20000910 	.word	0x20000910
 800527c:	200008f8 	.word	0x200008f8
 8005280:	200007f4 	.word	0x200007f4
 8005284:	200007f0 	.word	0x200007f0
 8005288:	20000904 	.word	0x20000904
 800528c:	20000900 	.word	0x20000900

08005290 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005296:	4b27      	ldr	r3, [pc, #156]	; (8005334 <vTaskSwitchContext+0xa4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800529e:	4b26      	ldr	r3, [pc, #152]	; (8005338 <vTaskSwitchContext+0xa8>)
 80052a0:	2201      	movs	r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052a4:	e03f      	b.n	8005326 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80052a6:	4b24      	ldr	r3, [pc, #144]	; (8005338 <vTaskSwitchContext+0xa8>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ac:	4b23      	ldr	r3, [pc, #140]	; (800533c <vTaskSwitchContext+0xac>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	fab3 f383 	clz	r3, r3
 80052b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80052ba:	7afb      	ldrb	r3, [r7, #11]
 80052bc:	f1c3 031f 	rsb	r3, r3, #31
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	491f      	ldr	r1, [pc, #124]	; (8005340 <vTaskSwitchContext+0xb0>)
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	440b      	add	r3, r1
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10a      	bne.n	80052ec <vTaskSwitchContext+0x5c>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	607b      	str	r3, [r7, #4]
}
 80052e8:	bf00      	nop
 80052ea:	e7fe      	b.n	80052ea <vTaskSwitchContext+0x5a>
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4a12      	ldr	r2, [pc, #72]	; (8005340 <vTaskSwitchContext+0xb0>)
 80052f8:	4413      	add	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	605a      	str	r2, [r3, #4]
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	3308      	adds	r3, #8
 800530e:	429a      	cmp	r2, r3
 8005310:	d104      	bne.n	800531c <vTaskSwitchContext+0x8c>
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	605a      	str	r2, [r3, #4]
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	4a08      	ldr	r2, [pc, #32]	; (8005344 <vTaskSwitchContext+0xb4>)
 8005324:	6013      	str	r3, [r2, #0]
}
 8005326:	bf00      	nop
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	20000918 	.word	0x20000918
 8005338:	20000904 	.word	0x20000904
 800533c:	200008f8 	.word	0x200008f8
 8005340:	200007f4 	.word	0x200007f4
 8005344:	200007f0 	.word	0x200007f0

08005348 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	60fb      	str	r3, [r7, #12]
}
 800536a:	bf00      	nop
 800536c:	e7fe      	b.n	800536c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800536e:	4b07      	ldr	r3, [pc, #28]	; (800538c <vTaskPlaceOnEventList+0x44>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3318      	adds	r3, #24
 8005374:	4619      	mov	r1, r3
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff f890 	bl	800449c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800537c:	2101      	movs	r1, #1
 800537e:	6838      	ldr	r0, [r7, #0]
 8005380:	f000 fa66 	bl	8005850 <prvAddCurrentTaskToDelayedList>
}
 8005384:	bf00      	nop
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	200007f0 	.word	0x200007f0

08005390 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	60fb      	str	r3, [r7, #12]
}
 80053b8:	bf00      	nop
 80053ba:	e7fe      	b.n	80053ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	3318      	adds	r3, #24
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff f8a4 	bl	800450e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053c6:	4b1d      	ldr	r3, [pc, #116]	; (800543c <xTaskRemoveFromEventList+0xac>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d11c      	bne.n	8005408 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	3304      	adds	r3, #4
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff f89b 	bl	800450e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053dc:	2201      	movs	r2, #1
 80053de:	409a      	lsls	r2, r3
 80053e0:	4b17      	ldr	r3, [pc, #92]	; (8005440 <xTaskRemoveFromEventList+0xb0>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	4a16      	ldr	r2, [pc, #88]	; (8005440 <xTaskRemoveFromEventList+0xb0>)
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ee:	4613      	mov	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4a13      	ldr	r2, [pc, #76]	; (8005444 <xTaskRemoveFromEventList+0xb4>)
 80053f8:	441a      	add	r2, r3
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	3304      	adds	r3, #4
 80053fe:	4619      	mov	r1, r3
 8005400:	4610      	mov	r0, r2
 8005402:	f7ff f827 	bl	8004454 <vListInsertEnd>
 8005406:	e005      	b.n	8005414 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	3318      	adds	r3, #24
 800540c:	4619      	mov	r1, r3
 800540e:	480e      	ldr	r0, [pc, #56]	; (8005448 <xTaskRemoveFromEventList+0xb8>)
 8005410:	f7ff f820 	bl	8004454 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005418:	4b0c      	ldr	r3, [pc, #48]	; (800544c <xTaskRemoveFromEventList+0xbc>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541e:	429a      	cmp	r2, r3
 8005420:	d905      	bls.n	800542e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005422:	2301      	movs	r3, #1
 8005424:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005426:	4b0a      	ldr	r3, [pc, #40]	; (8005450 <xTaskRemoveFromEventList+0xc0>)
 8005428:	2201      	movs	r2, #1
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	e001      	b.n	8005432 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005432:	697b      	ldr	r3, [r7, #20]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	20000918 	.word	0x20000918
 8005440:	200008f8 	.word	0x200008f8
 8005444:	200007f4 	.word	0x200007f4
 8005448:	200008b0 	.word	0x200008b0
 800544c:	200007f0 	.word	0x200007f0
 8005450:	20000904 	.word	0x20000904

08005454 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800545c:	4b06      	ldr	r3, [pc, #24]	; (8005478 <vTaskInternalSetTimeOutState+0x24>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005464:	4b05      	ldr	r3, [pc, #20]	; (800547c <vTaskInternalSetTimeOutState+0x28>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	605a      	str	r2, [r3, #4]
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	20000908 	.word	0x20000908
 800547c:	200008f4 	.word	0x200008f4

08005480 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b088      	sub	sp, #32
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	613b      	str	r3, [r7, #16]
}
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10a      	bne.n	80054c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	60fb      	str	r3, [r7, #12]
}
 80054be:	bf00      	nop
 80054c0:	e7fe      	b.n	80054c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80054c2:	f000 fb57 	bl	8005b74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054c6:	4b1d      	ldr	r3, [pc, #116]	; (800553c <xTaskCheckForTimeOut+0xbc>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054de:	d102      	bne.n	80054e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61fb      	str	r3, [r7, #28]
 80054e4:	e023      	b.n	800552e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	4b15      	ldr	r3, [pc, #84]	; (8005540 <xTaskCheckForTimeOut+0xc0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d007      	beq.n	8005502 <xTaskCheckForTimeOut+0x82>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d302      	bcc.n	8005502 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80054fc:	2301      	movs	r3, #1
 80054fe:	61fb      	str	r3, [r7, #28]
 8005500:	e015      	b.n	800552e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	429a      	cmp	r2, r3
 800550a:	d20b      	bcs.n	8005524 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	1ad2      	subs	r2, r2, r3
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff ff9b 	bl	8005454 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800551e:	2300      	movs	r3, #0
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	e004      	b.n	800552e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800552a:	2301      	movs	r3, #1
 800552c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800552e:	f000 fb51 	bl	8005bd4 <vPortExitCritical>

	return xReturn;
 8005532:	69fb      	ldr	r3, [r7, #28]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3720      	adds	r7, #32
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	200008f4 	.word	0x200008f4
 8005540:	20000908 	.word	0x20000908

08005544 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005548:	4b03      	ldr	r3, [pc, #12]	; (8005558 <vTaskMissedYield+0x14>)
 800554a:	2201      	movs	r2, #1
 800554c:	601a      	str	r2, [r3, #0]
}
 800554e:	bf00      	nop
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	20000904 	.word	0x20000904

0800555c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005564:	f000 f852 	bl	800560c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005568:	4b06      	ldr	r3, [pc, #24]	; (8005584 <prvIdleTask+0x28>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d9f9      	bls.n	8005564 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <prvIdleTask+0x2c>)
 8005572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005580:	e7f0      	b.n	8005564 <prvIdleTask+0x8>
 8005582:	bf00      	nop
 8005584:	200007f4 	.word	0x200007f4
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005592:	2300      	movs	r3, #0
 8005594:	607b      	str	r3, [r7, #4]
 8005596:	e00c      	b.n	80055b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4a12      	ldr	r2, [pc, #72]	; (80055ec <prvInitialiseTaskLists+0x60>)
 80055a4:	4413      	add	r3, r2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fe ff27 	bl	80043fa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3301      	adds	r3, #1
 80055b0:	607b      	str	r3, [r7, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b06      	cmp	r3, #6
 80055b6:	d9ef      	bls.n	8005598 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055b8:	480d      	ldr	r0, [pc, #52]	; (80055f0 <prvInitialiseTaskLists+0x64>)
 80055ba:	f7fe ff1e 	bl	80043fa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055be:	480d      	ldr	r0, [pc, #52]	; (80055f4 <prvInitialiseTaskLists+0x68>)
 80055c0:	f7fe ff1b 	bl	80043fa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055c4:	480c      	ldr	r0, [pc, #48]	; (80055f8 <prvInitialiseTaskLists+0x6c>)
 80055c6:	f7fe ff18 	bl	80043fa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055ca:	480c      	ldr	r0, [pc, #48]	; (80055fc <prvInitialiseTaskLists+0x70>)
 80055cc:	f7fe ff15 	bl	80043fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055d0:	480b      	ldr	r0, [pc, #44]	; (8005600 <prvInitialiseTaskLists+0x74>)
 80055d2:	f7fe ff12 	bl	80043fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055d6:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <prvInitialiseTaskLists+0x78>)
 80055d8:	4a05      	ldr	r2, [pc, #20]	; (80055f0 <prvInitialiseTaskLists+0x64>)
 80055da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055dc:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <prvInitialiseTaskLists+0x7c>)
 80055de:	4a05      	ldr	r2, [pc, #20]	; (80055f4 <prvInitialiseTaskLists+0x68>)
 80055e0:	601a      	str	r2, [r3, #0]
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	200007f4 	.word	0x200007f4
 80055f0:	20000880 	.word	0x20000880
 80055f4:	20000894 	.word	0x20000894
 80055f8:	200008b0 	.word	0x200008b0
 80055fc:	200008c4 	.word	0x200008c4
 8005600:	200008dc 	.word	0x200008dc
 8005604:	200008a8 	.word	0x200008a8
 8005608:	200008ac 	.word	0x200008ac

0800560c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005612:	e019      	b.n	8005648 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005614:	f000 faae 	bl	8005b74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005618:	4b10      	ldr	r3, [pc, #64]	; (800565c <prvCheckTasksWaitingTermination+0x50>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3304      	adds	r3, #4
 8005624:	4618      	mov	r0, r3
 8005626:	f7fe ff72 	bl	800450e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800562a:	4b0d      	ldr	r3, [pc, #52]	; (8005660 <prvCheckTasksWaitingTermination+0x54>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3b01      	subs	r3, #1
 8005630:	4a0b      	ldr	r2, [pc, #44]	; (8005660 <prvCheckTasksWaitingTermination+0x54>)
 8005632:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005634:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <prvCheckTasksWaitingTermination+0x58>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3b01      	subs	r3, #1
 800563a:	4a0a      	ldr	r2, [pc, #40]	; (8005664 <prvCheckTasksWaitingTermination+0x58>)
 800563c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800563e:	f000 fac9 	bl	8005bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f810 	bl	8005668 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005648:	4b06      	ldr	r3, [pc, #24]	; (8005664 <prvCheckTasksWaitingTermination+0x58>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e1      	bne.n	8005614 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	200008c4 	.word	0x200008c4
 8005660:	200008f0 	.word	0x200008f0
 8005664:	200008d8 	.word	0x200008d8

08005668 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005676:	2b00      	cmp	r3, #0
 8005678:	d108      	bne.n	800568c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fc26 	bl	8005ed0 <vPortFree>
				vPortFree( pxTCB );
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fc23 	bl	8005ed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800568a:	e018      	b.n	80056be <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005692:	2b01      	cmp	r3, #1
 8005694:	d103      	bne.n	800569e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fc1a 	bl	8005ed0 <vPortFree>
	}
 800569c:	e00f      	b.n	80056be <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d00a      	beq.n	80056be <prvDeleteTCB+0x56>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	60fb      	str	r3, [r7, #12]
}
 80056ba:	bf00      	nop
 80056bc:	e7fe      	b.n	80056bc <prvDeleteTCB+0x54>
	}
 80056be:	bf00      	nop
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ce:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <prvResetNextTaskUnblockTime+0x38>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d104      	bne.n	80056e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056d8:	4b0a      	ldr	r3, [pc, #40]	; (8005704 <prvResetNextTaskUnblockTime+0x3c>)
 80056da:	f04f 32ff 	mov.w	r2, #4294967295
 80056de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80056e0:	e008      	b.n	80056f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056e2:	4b07      	ldr	r3, [pc, #28]	; (8005700 <prvResetNextTaskUnblockTime+0x38>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	4a04      	ldr	r2, [pc, #16]	; (8005704 <prvResetNextTaskUnblockTime+0x3c>)
 80056f2:	6013      	str	r3, [r2, #0]
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	200008a8 	.word	0x200008a8
 8005704:	20000910 	.word	0x20000910

08005708 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800570e:	4b0b      	ldr	r3, [pc, #44]	; (800573c <xTaskGetSchedulerState+0x34>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d102      	bne.n	800571c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005716:	2301      	movs	r3, #1
 8005718:	607b      	str	r3, [r7, #4]
 800571a:	e008      	b.n	800572e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800571c:	4b08      	ldr	r3, [pc, #32]	; (8005740 <xTaskGetSchedulerState+0x38>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d102      	bne.n	800572a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005724:	2302      	movs	r3, #2
 8005726:	607b      	str	r3, [r7, #4]
 8005728:	e001      	b.n	800572e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800572a:	2300      	movs	r3, #0
 800572c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800572e:	687b      	ldr	r3, [r7, #4]
	}
 8005730:	4618      	mov	r0, r3
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	200008fc 	.word	0x200008fc
 8005740:	20000918 	.word	0x20000918

08005744 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005750:	2300      	movs	r3, #0
 8005752:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d06e      	beq.n	8005838 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800575a:	4b3a      	ldr	r3, [pc, #232]	; (8005844 <xTaskPriorityDisinherit+0x100>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	429a      	cmp	r2, r3
 8005762:	d00a      	beq.n	800577a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	60fb      	str	r3, [r7, #12]
}
 8005776:	bf00      	nop
 8005778:	e7fe      	b.n	8005778 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10a      	bne.n	8005798 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	60bb      	str	r3, [r7, #8]
}
 8005794:	bf00      	nop
 8005796:	e7fe      	b.n	8005796 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800579c:	1e5a      	subs	r2, r3, #1
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d044      	beq.n	8005838 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d140      	bne.n	8005838 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	3304      	adds	r3, #4
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fe fea7 	bl	800450e <uxListRemove>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d115      	bne.n	80057f2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ca:	491f      	ldr	r1, [pc, #124]	; (8005848 <xTaskPriorityDisinherit+0x104>)
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10a      	bne.n	80057f2 <xTaskPriorityDisinherit+0xae>
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	2201      	movs	r2, #1
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	43da      	mvns	r2, r3
 80057e8:	4b18      	ldr	r3, [pc, #96]	; (800584c <xTaskPriorityDisinherit+0x108>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4013      	ands	r3, r2
 80057ee:	4a17      	ldr	r2, [pc, #92]	; (800584c <xTaskPriorityDisinherit+0x108>)
 80057f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	f1c3 0207 	rsb	r2, r3, #7
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	2201      	movs	r2, #1
 800580c:	409a      	lsls	r2, r3
 800580e:	4b0f      	ldr	r3, [pc, #60]	; (800584c <xTaskPriorityDisinherit+0x108>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4313      	orrs	r3, r2
 8005814:	4a0d      	ldr	r2, [pc, #52]	; (800584c <xTaskPriorityDisinherit+0x108>)
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581c:	4613      	mov	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4a08      	ldr	r2, [pc, #32]	; (8005848 <xTaskPriorityDisinherit+0x104>)
 8005826:	441a      	add	r2, r3
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	3304      	adds	r3, #4
 800582c:	4619      	mov	r1, r3
 800582e:	4610      	mov	r0, r2
 8005830:	f7fe fe10 	bl	8004454 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005834:	2301      	movs	r3, #1
 8005836:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005838:	697b      	ldr	r3, [r7, #20]
	}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	200007f0 	.word	0x200007f0
 8005848:	200007f4 	.word	0x200007f4
 800584c:	200008f8 	.word	0x200008f8

08005850 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800585a:	4b29      	ldr	r3, [pc, #164]	; (8005900 <prvAddCurrentTaskToDelayedList+0xb0>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005860:	4b28      	ldr	r3, [pc, #160]	; (8005904 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3304      	adds	r3, #4
 8005866:	4618      	mov	r0, r3
 8005868:	f7fe fe51 	bl	800450e <uxListRemove>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10b      	bne.n	800588a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005872:	4b24      	ldr	r3, [pc, #144]	; (8005904 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	2201      	movs	r2, #1
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43da      	mvns	r2, r3
 8005880:	4b21      	ldr	r3, [pc, #132]	; (8005908 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4013      	ands	r3, r2
 8005886:	4a20      	ldr	r2, [pc, #128]	; (8005908 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005888:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005890:	d10a      	bne.n	80058a8 <prvAddCurrentTaskToDelayedList+0x58>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d007      	beq.n	80058a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005898:	4b1a      	ldr	r3, [pc, #104]	; (8005904 <prvAddCurrentTaskToDelayedList+0xb4>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3304      	adds	r3, #4
 800589e:	4619      	mov	r1, r3
 80058a0:	481a      	ldr	r0, [pc, #104]	; (800590c <prvAddCurrentTaskToDelayedList+0xbc>)
 80058a2:	f7fe fdd7 	bl	8004454 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058a6:	e026      	b.n	80058f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4413      	add	r3, r2
 80058ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058b0:	4b14      	ldr	r3, [pc, #80]	; (8005904 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d209      	bcs.n	80058d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058c0:	4b13      	ldr	r3, [pc, #76]	; (8005910 <prvAddCurrentTaskToDelayedList+0xc0>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	4b0f      	ldr	r3, [pc, #60]	; (8005904 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3304      	adds	r3, #4
 80058ca:	4619      	mov	r1, r3
 80058cc:	4610      	mov	r0, r2
 80058ce:	f7fe fde5 	bl	800449c <vListInsert>
}
 80058d2:	e010      	b.n	80058f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058d4:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <prvAddCurrentTaskToDelayedList+0xc4>)
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3304      	adds	r3, #4
 80058de:	4619      	mov	r1, r3
 80058e0:	4610      	mov	r0, r2
 80058e2:	f7fe fddb 	bl	800449c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058e6:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <prvAddCurrentTaskToDelayedList+0xc8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d202      	bcs.n	80058f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80058f0:	4a09      	ldr	r2, [pc, #36]	; (8005918 <prvAddCurrentTaskToDelayedList+0xc8>)
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	6013      	str	r3, [r2, #0]
}
 80058f6:	bf00      	nop
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	200008f4 	.word	0x200008f4
 8005904:	200007f0 	.word	0x200007f0
 8005908:	200008f8 	.word	0x200008f8
 800590c:	200008dc 	.word	0x200008dc
 8005910:	200008ac 	.word	0x200008ac
 8005914:	200008a8 	.word	0x200008a8
 8005918:	20000910 	.word	0x20000910

0800591c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3b04      	subs	r3, #4
 800592c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3b04      	subs	r3, #4
 800593a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f023 0201 	bic.w	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	3b04      	subs	r3, #4
 800594a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800594c:	4a0c      	ldr	r2, [pc, #48]	; (8005980 <pxPortInitialiseStack+0x64>)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3b14      	subs	r3, #20
 8005956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3b04      	subs	r3, #4
 8005962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f06f 0202 	mvn.w	r2, #2
 800596a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3b20      	subs	r3, #32
 8005970:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005972:	68fb      	ldr	r3, [r7, #12]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	08005985 	.word	0x08005985

08005984 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800598e:	4b12      	ldr	r3, [pc, #72]	; (80059d8 <prvTaskExitError+0x54>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005996:	d00a      	beq.n	80059ae <prvTaskExitError+0x2a>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	60fb      	str	r3, [r7, #12]
}
 80059aa:	bf00      	nop
 80059ac:	e7fe      	b.n	80059ac <prvTaskExitError+0x28>
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	60bb      	str	r3, [r7, #8]
}
 80059c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059c2:	bf00      	nop
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0fc      	beq.n	80059c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059ca:	bf00      	nop
 80059cc:	bf00      	nop
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	20000014 	.word	0x20000014
 80059dc:	00000000 	.word	0x00000000

080059e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80059e0:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <pxCurrentTCBConst2>)
 80059e2:	6819      	ldr	r1, [r3, #0]
 80059e4:	6808      	ldr	r0, [r1, #0]
 80059e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ea:	f380 8809 	msr	PSP, r0
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f04f 0000 	mov.w	r0, #0
 80059f6:	f380 8811 	msr	BASEPRI, r0
 80059fa:	4770      	bx	lr
 80059fc:	f3af 8000 	nop.w

08005a00 <pxCurrentTCBConst2>:
 8005a00:	200007f0 	.word	0x200007f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop

08005a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a08:	4808      	ldr	r0, [pc, #32]	; (8005a2c <prvPortStartFirstTask+0x24>)
 8005a0a:	6800      	ldr	r0, [r0, #0]
 8005a0c:	6800      	ldr	r0, [r0, #0]
 8005a0e:	f380 8808 	msr	MSP, r0
 8005a12:	f04f 0000 	mov.w	r0, #0
 8005a16:	f380 8814 	msr	CONTROL, r0
 8005a1a:	b662      	cpsie	i
 8005a1c:	b661      	cpsie	f
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	df00      	svc	0
 8005a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a2a:	bf00      	nop
 8005a2c:	e000ed08 	.word	0xe000ed08

08005a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a36:	4b46      	ldr	r3, [pc, #280]	; (8005b50 <xPortStartScheduler+0x120>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a46      	ldr	r2, [pc, #280]	; (8005b54 <xPortStartScheduler+0x124>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d10a      	bne.n	8005a56 <xPortStartScheduler+0x26>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	613b      	str	r3, [r7, #16]
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a56:	4b3e      	ldr	r3, [pc, #248]	; (8005b50 <xPortStartScheduler+0x120>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a3f      	ldr	r2, [pc, #252]	; (8005b58 <xPortStartScheduler+0x128>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d10a      	bne.n	8005a76 <xPortStartScheduler+0x46>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	60fb      	str	r3, [r7, #12]
}
 8005a72:	bf00      	nop
 8005a74:	e7fe      	b.n	8005a74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a76:	4b39      	ldr	r3, [pc, #228]	; (8005b5c <xPortStartScheduler+0x12c>)
 8005a78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	22ff      	movs	r2, #255	; 0xff
 8005a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a90:	78fb      	ldrb	r3, [r7, #3]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	4b31      	ldr	r3, [pc, #196]	; (8005b60 <xPortStartScheduler+0x130>)
 8005a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a9e:	4b31      	ldr	r3, [pc, #196]	; (8005b64 <xPortStartScheduler+0x134>)
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aa4:	e009      	b.n	8005aba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005aa6:	4b2f      	ldr	r3, [pc, #188]	; (8005b64 <xPortStartScheduler+0x134>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	4a2d      	ldr	r2, [pc, #180]	; (8005b64 <xPortStartScheduler+0x134>)
 8005aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aba:	78fb      	ldrb	r3, [r7, #3]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac2:	2b80      	cmp	r3, #128	; 0x80
 8005ac4:	d0ef      	beq.n	8005aa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ac6:	4b27      	ldr	r3, [pc, #156]	; (8005b64 <xPortStartScheduler+0x134>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f1c3 0307 	rsb	r3, r3, #7
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d00a      	beq.n	8005ae8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	60bb      	str	r3, [r7, #8]
}
 8005ae4:	bf00      	nop
 8005ae6:	e7fe      	b.n	8005ae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ae8:	4b1e      	ldr	r3, [pc, #120]	; (8005b64 <xPortStartScheduler+0x134>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	4a1d      	ldr	r2, [pc, #116]	; (8005b64 <xPortStartScheduler+0x134>)
 8005af0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005af2:	4b1c      	ldr	r3, [pc, #112]	; (8005b64 <xPortStartScheduler+0x134>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005afa:	4a1a      	ldr	r2, [pc, #104]	; (8005b64 <xPortStartScheduler+0x134>)
 8005afc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b06:	4b18      	ldr	r3, [pc, #96]	; (8005b68 <xPortStartScheduler+0x138>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a17      	ldr	r2, [pc, #92]	; (8005b68 <xPortStartScheduler+0x138>)
 8005b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b12:	4b15      	ldr	r3, [pc, #84]	; (8005b68 <xPortStartScheduler+0x138>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a14      	ldr	r2, [pc, #80]	; (8005b68 <xPortStartScheduler+0x138>)
 8005b18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b1e:	f000 f8dd 	bl	8005cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b22:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <xPortStartScheduler+0x13c>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b28:	f000 f8fc 	bl	8005d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b2c:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <xPortStartScheduler+0x140>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a0f      	ldr	r2, [pc, #60]	; (8005b70 <xPortStartScheduler+0x140>)
 8005b32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b38:	f7ff ff66 	bl	8005a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b3c:	f7ff fba8 	bl	8005290 <vTaskSwitchContext>
	prvTaskExitError();
 8005b40:	f7ff ff20 	bl	8005984 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	e000ed00 	.word	0xe000ed00
 8005b54:	410fc271 	.word	0x410fc271
 8005b58:	410fc270 	.word	0x410fc270
 8005b5c:	e000e400 	.word	0xe000e400
 8005b60:	2000091c 	.word	0x2000091c
 8005b64:	20000920 	.word	0x20000920
 8005b68:	e000ed20 	.word	0xe000ed20
 8005b6c:	20000014 	.word	0x20000014
 8005b70:	e000ef34 	.word	0xe000ef34

08005b74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	607b      	str	r3, [r7, #4]
}
 8005b8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b8e:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <vPortEnterCritical+0x58>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3301      	adds	r3, #1
 8005b94:	4a0d      	ldr	r2, [pc, #52]	; (8005bcc <vPortEnterCritical+0x58>)
 8005b96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b98:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <vPortEnterCritical+0x58>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d10f      	bne.n	8005bc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <vPortEnterCritical+0x5c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	603b      	str	r3, [r7, #0]
}
 8005bbc:	bf00      	nop
 8005bbe:	e7fe      	b.n	8005bbe <vPortEnterCritical+0x4a>
	}
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	20000014 	.word	0x20000014
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005bda:	4b12      	ldr	r3, [pc, #72]	; (8005c24 <vPortExitCritical+0x50>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10a      	bne.n	8005bf8 <vPortExitCritical+0x24>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	607b      	str	r3, [r7, #4]
}
 8005bf4:	bf00      	nop
 8005bf6:	e7fe      	b.n	8005bf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <vPortExitCritical+0x50>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	4a09      	ldr	r2, [pc, #36]	; (8005c24 <vPortExitCritical+0x50>)
 8005c00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c02:	4b08      	ldr	r3, [pc, #32]	; (8005c24 <vPortExitCritical+0x50>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d105      	bne.n	8005c16 <vPortExitCritical+0x42>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	20000014 	.word	0x20000014
	...

08005c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c30:	f3ef 8009 	mrs	r0, PSP
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	4b15      	ldr	r3, [pc, #84]	; (8005c90 <pxCurrentTCBConst>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	f01e 0f10 	tst.w	lr, #16
 8005c40:	bf08      	it	eq
 8005c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c4a:	6010      	str	r0, [r2, #0]
 8005c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c54:	f380 8811 	msr	BASEPRI, r0
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f7ff fb16 	bl	8005290 <vTaskSwitchContext>
 8005c64:	f04f 0000 	mov.w	r0, #0
 8005c68:	f380 8811 	msr	BASEPRI, r0
 8005c6c:	bc09      	pop	{r0, r3}
 8005c6e:	6819      	ldr	r1, [r3, #0]
 8005c70:	6808      	ldr	r0, [r1, #0]
 8005c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c76:	f01e 0f10 	tst.w	lr, #16
 8005c7a:	bf08      	it	eq
 8005c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c80:	f380 8809 	msr	PSP, r0
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	f3af 8000 	nop.w

08005c90 <pxCurrentTCBConst>:
 8005c90:	200007f0 	.word	0x200007f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop

08005c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	607b      	str	r3, [r7, #4]
}
 8005cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005cb2:	f7ff fa35 	bl	8005120 <xTaskIncrementTick>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cbc:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <SysTick_Handler+0x40>)
 8005cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	f383 8811 	msr	BASEPRI, r3
}
 8005cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005cd0:	bf00      	nop
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	e000ed04 	.word	0xe000ed04

08005cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <vPortSetupTimerInterrupt+0x34>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ce6:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <vPortSetupTimerInterrupt+0x38>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cec:	4b0a      	ldr	r3, [pc, #40]	; (8005d18 <vPortSetupTimerInterrupt+0x3c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a0a      	ldr	r2, [pc, #40]	; (8005d1c <vPortSetupTimerInterrupt+0x40>)
 8005cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf6:	099b      	lsrs	r3, r3, #6
 8005cf8:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <vPortSetupTimerInterrupt+0x44>)
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cfe:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <vPortSetupTimerInterrupt+0x34>)
 8005d00:	2207      	movs	r2, #7
 8005d02:	601a      	str	r2, [r3, #0]
}
 8005d04:	bf00      	nop
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	e000e010 	.word	0xe000e010
 8005d14:	e000e018 	.word	0xe000e018
 8005d18:	20000008 	.word	0x20000008
 8005d1c:	10624dd3 	.word	0x10624dd3
 8005d20:	e000e014 	.word	0xe000e014

08005d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d34 <vPortEnableVFP+0x10>
 8005d28:	6801      	ldr	r1, [r0, #0]
 8005d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d2e:	6001      	str	r1, [r0, #0]
 8005d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d32:	bf00      	nop
 8005d34:	e000ed88 	.word	0xe000ed88

08005d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08a      	sub	sp, #40	; 0x28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d44:	f7ff f942 	bl	8004fcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d48:	4b5b      	ldr	r3, [pc, #364]	; (8005eb8 <pvPortMalloc+0x180>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d50:	f000 f920 	bl	8005f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d54:	4b59      	ldr	r3, [pc, #356]	; (8005ebc <pvPortMalloc+0x184>)
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f040 8093 	bne.w	8005e88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d01d      	beq.n	8005da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005d68:	2208      	movs	r2, #8
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d014      	beq.n	8005da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f023 0307 	bic.w	r3, r3, #7
 8005d80:	3308      	adds	r3, #8
 8005d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <pvPortMalloc+0x6c>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	617b      	str	r3, [r7, #20]
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d06e      	beq.n	8005e88 <pvPortMalloc+0x150>
 8005daa:	4b45      	ldr	r3, [pc, #276]	; (8005ec0 <pvPortMalloc+0x188>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d869      	bhi.n	8005e88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005db4:	4b43      	ldr	r3, [pc, #268]	; (8005ec4 <pvPortMalloc+0x18c>)
 8005db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005db8:	4b42      	ldr	r3, [pc, #264]	; (8005ec4 <pvPortMalloc+0x18c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dbe:	e004      	b.n	8005dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d903      	bls.n	8005ddc <pvPortMalloc+0xa4>
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f1      	bne.n	8005dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ddc:	4b36      	ldr	r3, [pc, #216]	; (8005eb8 <pvPortMalloc+0x180>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d050      	beq.n	8005e88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2208      	movs	r2, #8
 8005dec:	4413      	add	r3, r2
 8005dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	1ad2      	subs	r2, r2, r3
 8005e00:	2308      	movs	r3, #8
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d91f      	bls.n	8005e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <pvPortMalloc+0xf8>
	__asm volatile
 8005e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	613b      	str	r3, [r7, #16]
}
 8005e2c:	bf00      	nop
 8005e2e:	e7fe      	b.n	8005e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	1ad2      	subs	r2, r2, r3
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e42:	69b8      	ldr	r0, [r7, #24]
 8005e44:	f000 f908 	bl	8006058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e48:	4b1d      	ldr	r3, [pc, #116]	; (8005ec0 <pvPortMalloc+0x188>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	4a1b      	ldr	r2, [pc, #108]	; (8005ec0 <pvPortMalloc+0x188>)
 8005e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e56:	4b1a      	ldr	r3, [pc, #104]	; (8005ec0 <pvPortMalloc+0x188>)
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	4b1b      	ldr	r3, [pc, #108]	; (8005ec8 <pvPortMalloc+0x190>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d203      	bcs.n	8005e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e62:	4b17      	ldr	r3, [pc, #92]	; (8005ec0 <pvPortMalloc+0x188>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a18      	ldr	r2, [pc, #96]	; (8005ec8 <pvPortMalloc+0x190>)
 8005e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	4b13      	ldr	r3, [pc, #76]	; (8005ebc <pvPortMalloc+0x184>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e7e:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <pvPortMalloc+0x194>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3301      	adds	r3, #1
 8005e84:	4a11      	ldr	r2, [pc, #68]	; (8005ecc <pvPortMalloc+0x194>)
 8005e86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e88:	f7ff f8ae 	bl	8004fe8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <pvPortMalloc+0x174>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	60fb      	str	r3, [r7, #12]
}
 8005ea8:	bf00      	nop
 8005eaa:	e7fe      	b.n	8005eaa <pvPortMalloc+0x172>
	return pvReturn;
 8005eac:	69fb      	ldr	r3, [r7, #28]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3728      	adds	r7, #40	; 0x28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	2000452c 	.word	0x2000452c
 8005ebc:	20004540 	.word	0x20004540
 8005ec0:	20004530 	.word	0x20004530
 8005ec4:	20004524 	.word	0x20004524
 8005ec8:	20004534 	.word	0x20004534
 8005ecc:	20004538 	.word	0x20004538

08005ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d04d      	beq.n	8005f7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ee2:	2308      	movs	r3, #8
 8005ee4:	425b      	negs	r3, r3
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4413      	add	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	4b24      	ldr	r3, [pc, #144]	; (8005f88 <vPortFree+0xb8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10a      	bne.n	8005f14 <vPortFree+0x44>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	60fb      	str	r3, [r7, #12]
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <vPortFree+0x62>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	60bb      	str	r3, [r7, #8]
}
 8005f2e:	bf00      	nop
 8005f30:	e7fe      	b.n	8005f30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	4b14      	ldr	r3, [pc, #80]	; (8005f88 <vPortFree+0xb8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01e      	beq.n	8005f7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d11a      	bne.n	8005f7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	4b0e      	ldr	r3, [pc, #56]	; (8005f88 <vPortFree+0xb8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	43db      	mvns	r3, r3
 8005f52:	401a      	ands	r2, r3
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f58:	f7ff f838 	bl	8004fcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <vPortFree+0xbc>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4413      	add	r3, r2
 8005f66:	4a09      	ldr	r2, [pc, #36]	; (8005f8c <vPortFree+0xbc>)
 8005f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f6a:	6938      	ldr	r0, [r7, #16]
 8005f6c:	f000 f874 	bl	8006058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f70:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <vPortFree+0xc0>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3301      	adds	r3, #1
 8005f76:	4a06      	ldr	r2, [pc, #24]	; (8005f90 <vPortFree+0xc0>)
 8005f78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f7a:	f7ff f835 	bl	8004fe8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f7e:	bf00      	nop
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20004540 	.word	0x20004540
 8005f8c:	20004530 	.word	0x20004530
 8005f90:	2000453c 	.word	0x2000453c

08005f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fa0:	4b27      	ldr	r3, [pc, #156]	; (8006040 <prvHeapInit+0xac>)
 8005fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00c      	beq.n	8005fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3307      	adds	r3, #7
 8005fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 0307 	bic.w	r3, r3, #7
 8005fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	4a1f      	ldr	r2, [pc, #124]	; (8006040 <prvHeapInit+0xac>)
 8005fc4:	4413      	add	r3, r2
 8005fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fcc:	4a1d      	ldr	r2, [pc, #116]	; (8006044 <prvHeapInit+0xb0>)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005fd2:	4b1c      	ldr	r3, [pc, #112]	; (8006044 <prvHeapInit+0xb0>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	4413      	add	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005fe0:	2208      	movs	r2, #8
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	1a9b      	subs	r3, r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0307 	bic.w	r3, r3, #7
 8005fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4a15      	ldr	r2, [pc, #84]	; (8006048 <prvHeapInit+0xb4>)
 8005ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ff6:	4b14      	ldr	r3, [pc, #80]	; (8006048 <prvHeapInit+0xb4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ffe:	4b12      	ldr	r3, [pc, #72]	; (8006048 <prvHeapInit+0xb4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	1ad2      	subs	r2, r2, r3
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006014:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <prvHeapInit+0xb4>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	4a0a      	ldr	r2, [pc, #40]	; (800604c <prvHeapInit+0xb8>)
 8006022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	4a09      	ldr	r2, [pc, #36]	; (8006050 <prvHeapInit+0xbc>)
 800602a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800602c:	4b09      	ldr	r3, [pc, #36]	; (8006054 <prvHeapInit+0xc0>)
 800602e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006032:	601a      	str	r2, [r3, #0]
}
 8006034:	bf00      	nop
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	20000924 	.word	0x20000924
 8006044:	20004524 	.word	0x20004524
 8006048:	2000452c 	.word	0x2000452c
 800604c:	20004534 	.word	0x20004534
 8006050:	20004530 	.word	0x20004530
 8006054:	20004540 	.word	0x20004540

08006058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006060:	4b28      	ldr	r3, [pc, #160]	; (8006104 <prvInsertBlockIntoFreeList+0xac>)
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	e002      	b.n	800606c <prvInsertBlockIntoFreeList+0x14>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	429a      	cmp	r2, r3
 8006074:	d8f7      	bhi.n	8006066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	4413      	add	r3, r2
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	429a      	cmp	r2, r3
 8006086:	d108      	bne.n	800609a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	441a      	add	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	441a      	add	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d118      	bne.n	80060e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b15      	ldr	r3, [pc, #84]	; (8006108 <prvInsertBlockIntoFreeList+0xb0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d00d      	beq.n	80060d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	441a      	add	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e008      	b.n	80060e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060d6:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <prvInsertBlockIntoFreeList+0xb0>)
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	e003      	b.n	80060e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d002      	beq.n	80060f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	20004524 	.word	0x20004524
 8006108:	2000452c 	.word	0x2000452c

0800610c <malloc>:
 800610c:	4b02      	ldr	r3, [pc, #8]	; (8006118 <malloc+0xc>)
 800610e:	4601      	mov	r1, r0
 8006110:	6818      	ldr	r0, [r3, #0]
 8006112:	f000 b823 	b.w	800615c <_malloc_r>
 8006116:	bf00      	nop
 8006118:	20000064 	.word	0x20000064

0800611c <sbrk_aligned>:
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	4e0e      	ldr	r6, [pc, #56]	; (8006158 <sbrk_aligned+0x3c>)
 8006120:	460c      	mov	r4, r1
 8006122:	6831      	ldr	r1, [r6, #0]
 8006124:	4605      	mov	r5, r0
 8006126:	b911      	cbnz	r1, 800612e <sbrk_aligned+0x12>
 8006128:	f000 f8bc 	bl	80062a4 <_sbrk_r>
 800612c:	6030      	str	r0, [r6, #0]
 800612e:	4621      	mov	r1, r4
 8006130:	4628      	mov	r0, r5
 8006132:	f000 f8b7 	bl	80062a4 <_sbrk_r>
 8006136:	1c43      	adds	r3, r0, #1
 8006138:	d00a      	beq.n	8006150 <sbrk_aligned+0x34>
 800613a:	1cc4      	adds	r4, r0, #3
 800613c:	f024 0403 	bic.w	r4, r4, #3
 8006140:	42a0      	cmp	r0, r4
 8006142:	d007      	beq.n	8006154 <sbrk_aligned+0x38>
 8006144:	1a21      	subs	r1, r4, r0
 8006146:	4628      	mov	r0, r5
 8006148:	f000 f8ac 	bl	80062a4 <_sbrk_r>
 800614c:	3001      	adds	r0, #1
 800614e:	d101      	bne.n	8006154 <sbrk_aligned+0x38>
 8006150:	f04f 34ff 	mov.w	r4, #4294967295
 8006154:	4620      	mov	r0, r4
 8006156:	bd70      	pop	{r4, r5, r6, pc}
 8006158:	20004548 	.word	0x20004548

0800615c <_malloc_r>:
 800615c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006160:	1ccd      	adds	r5, r1, #3
 8006162:	f025 0503 	bic.w	r5, r5, #3
 8006166:	3508      	adds	r5, #8
 8006168:	2d0c      	cmp	r5, #12
 800616a:	bf38      	it	cc
 800616c:	250c      	movcc	r5, #12
 800616e:	2d00      	cmp	r5, #0
 8006170:	4607      	mov	r7, r0
 8006172:	db01      	blt.n	8006178 <_malloc_r+0x1c>
 8006174:	42a9      	cmp	r1, r5
 8006176:	d905      	bls.n	8006184 <_malloc_r+0x28>
 8006178:	230c      	movs	r3, #12
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	2600      	movs	r6, #0
 800617e:	4630      	mov	r0, r6
 8006180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006184:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006258 <_malloc_r+0xfc>
 8006188:	f000 f868 	bl	800625c <__malloc_lock>
 800618c:	f8d8 3000 	ldr.w	r3, [r8]
 8006190:	461c      	mov	r4, r3
 8006192:	bb5c      	cbnz	r4, 80061ec <_malloc_r+0x90>
 8006194:	4629      	mov	r1, r5
 8006196:	4638      	mov	r0, r7
 8006198:	f7ff ffc0 	bl	800611c <sbrk_aligned>
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	4604      	mov	r4, r0
 80061a0:	d155      	bne.n	800624e <_malloc_r+0xf2>
 80061a2:	f8d8 4000 	ldr.w	r4, [r8]
 80061a6:	4626      	mov	r6, r4
 80061a8:	2e00      	cmp	r6, #0
 80061aa:	d145      	bne.n	8006238 <_malloc_r+0xdc>
 80061ac:	2c00      	cmp	r4, #0
 80061ae:	d048      	beq.n	8006242 <_malloc_r+0xe6>
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	4631      	mov	r1, r6
 80061b4:	4638      	mov	r0, r7
 80061b6:	eb04 0903 	add.w	r9, r4, r3
 80061ba:	f000 f873 	bl	80062a4 <_sbrk_r>
 80061be:	4581      	cmp	r9, r0
 80061c0:	d13f      	bne.n	8006242 <_malloc_r+0xe6>
 80061c2:	6821      	ldr	r1, [r4, #0]
 80061c4:	1a6d      	subs	r5, r5, r1
 80061c6:	4629      	mov	r1, r5
 80061c8:	4638      	mov	r0, r7
 80061ca:	f7ff ffa7 	bl	800611c <sbrk_aligned>
 80061ce:	3001      	adds	r0, #1
 80061d0:	d037      	beq.n	8006242 <_malloc_r+0xe6>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	442b      	add	r3, r5
 80061d6:	6023      	str	r3, [r4, #0]
 80061d8:	f8d8 3000 	ldr.w	r3, [r8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d038      	beq.n	8006252 <_malloc_r+0xf6>
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	42a2      	cmp	r2, r4
 80061e4:	d12b      	bne.n	800623e <_malloc_r+0xe2>
 80061e6:	2200      	movs	r2, #0
 80061e8:	605a      	str	r2, [r3, #4]
 80061ea:	e00f      	b.n	800620c <_malloc_r+0xb0>
 80061ec:	6822      	ldr	r2, [r4, #0]
 80061ee:	1b52      	subs	r2, r2, r5
 80061f0:	d41f      	bmi.n	8006232 <_malloc_r+0xd6>
 80061f2:	2a0b      	cmp	r2, #11
 80061f4:	d917      	bls.n	8006226 <_malloc_r+0xca>
 80061f6:	1961      	adds	r1, r4, r5
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	6025      	str	r5, [r4, #0]
 80061fc:	bf18      	it	ne
 80061fe:	6059      	strne	r1, [r3, #4]
 8006200:	6863      	ldr	r3, [r4, #4]
 8006202:	bf08      	it	eq
 8006204:	f8c8 1000 	streq.w	r1, [r8]
 8006208:	5162      	str	r2, [r4, r5]
 800620a:	604b      	str	r3, [r1, #4]
 800620c:	4638      	mov	r0, r7
 800620e:	f104 060b 	add.w	r6, r4, #11
 8006212:	f000 f829 	bl	8006268 <__malloc_unlock>
 8006216:	f026 0607 	bic.w	r6, r6, #7
 800621a:	1d23      	adds	r3, r4, #4
 800621c:	1af2      	subs	r2, r6, r3
 800621e:	d0ae      	beq.n	800617e <_malloc_r+0x22>
 8006220:	1b9b      	subs	r3, r3, r6
 8006222:	50a3      	str	r3, [r4, r2]
 8006224:	e7ab      	b.n	800617e <_malloc_r+0x22>
 8006226:	42a3      	cmp	r3, r4
 8006228:	6862      	ldr	r2, [r4, #4]
 800622a:	d1dd      	bne.n	80061e8 <_malloc_r+0x8c>
 800622c:	f8c8 2000 	str.w	r2, [r8]
 8006230:	e7ec      	b.n	800620c <_malloc_r+0xb0>
 8006232:	4623      	mov	r3, r4
 8006234:	6864      	ldr	r4, [r4, #4]
 8006236:	e7ac      	b.n	8006192 <_malloc_r+0x36>
 8006238:	4634      	mov	r4, r6
 800623a:	6876      	ldr	r6, [r6, #4]
 800623c:	e7b4      	b.n	80061a8 <_malloc_r+0x4c>
 800623e:	4613      	mov	r3, r2
 8006240:	e7cc      	b.n	80061dc <_malloc_r+0x80>
 8006242:	230c      	movs	r3, #12
 8006244:	603b      	str	r3, [r7, #0]
 8006246:	4638      	mov	r0, r7
 8006248:	f000 f80e 	bl	8006268 <__malloc_unlock>
 800624c:	e797      	b.n	800617e <_malloc_r+0x22>
 800624e:	6025      	str	r5, [r4, #0]
 8006250:	e7dc      	b.n	800620c <_malloc_r+0xb0>
 8006252:	605b      	str	r3, [r3, #4]
 8006254:	deff      	udf	#255	; 0xff
 8006256:	bf00      	nop
 8006258:	20004544 	.word	0x20004544

0800625c <__malloc_lock>:
 800625c:	4801      	ldr	r0, [pc, #4]	; (8006264 <__malloc_lock+0x8>)
 800625e:	f000 b85b 	b.w	8006318 <__retarget_lock_acquire_recursive>
 8006262:	bf00      	nop
 8006264:	20004688 	.word	0x20004688

08006268 <__malloc_unlock>:
 8006268:	4801      	ldr	r0, [pc, #4]	; (8006270 <__malloc_unlock+0x8>)
 800626a:	f000 b856 	b.w	800631a <__retarget_lock_release_recursive>
 800626e:	bf00      	nop
 8006270:	20004688 	.word	0x20004688

08006274 <memset>:
 8006274:	4402      	add	r2, r0
 8006276:	4603      	mov	r3, r0
 8006278:	4293      	cmp	r3, r2
 800627a:	d100      	bne.n	800627e <memset+0xa>
 800627c:	4770      	bx	lr
 800627e:	f803 1b01 	strb.w	r1, [r3], #1
 8006282:	e7f9      	b.n	8006278 <memset+0x4>

08006284 <strcat>:
 8006284:	b510      	push	{r4, lr}
 8006286:	4602      	mov	r2, r0
 8006288:	7814      	ldrb	r4, [r2, #0]
 800628a:	4613      	mov	r3, r2
 800628c:	3201      	adds	r2, #1
 800628e:	2c00      	cmp	r4, #0
 8006290:	d1fa      	bne.n	8006288 <strcat+0x4>
 8006292:	3b01      	subs	r3, #1
 8006294:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006298:	f803 2f01 	strb.w	r2, [r3, #1]!
 800629c:	2a00      	cmp	r2, #0
 800629e:	d1f9      	bne.n	8006294 <strcat+0x10>
 80062a0:	bd10      	pop	{r4, pc}
	...

080062a4 <_sbrk_r>:
 80062a4:	b538      	push	{r3, r4, r5, lr}
 80062a6:	4d06      	ldr	r5, [pc, #24]	; (80062c0 <_sbrk_r+0x1c>)
 80062a8:	2300      	movs	r3, #0
 80062aa:	4604      	mov	r4, r0
 80062ac:	4608      	mov	r0, r1
 80062ae:	602b      	str	r3, [r5, #0]
 80062b0:	f7fb fb0c 	bl	80018cc <_sbrk>
 80062b4:	1c43      	adds	r3, r0, #1
 80062b6:	d102      	bne.n	80062be <_sbrk_r+0x1a>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	b103      	cbz	r3, 80062be <_sbrk_r+0x1a>
 80062bc:	6023      	str	r3, [r4, #0]
 80062be:	bd38      	pop	{r3, r4, r5, pc}
 80062c0:	20004684 	.word	0x20004684

080062c4 <__errno>:
 80062c4:	4b01      	ldr	r3, [pc, #4]	; (80062cc <__errno+0x8>)
 80062c6:	6818      	ldr	r0, [r3, #0]
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	20000064 	.word	0x20000064

080062d0 <__libc_init_array>:
 80062d0:	b570      	push	{r4, r5, r6, lr}
 80062d2:	4d0d      	ldr	r5, [pc, #52]	; (8006308 <__libc_init_array+0x38>)
 80062d4:	4c0d      	ldr	r4, [pc, #52]	; (800630c <__libc_init_array+0x3c>)
 80062d6:	1b64      	subs	r4, r4, r5
 80062d8:	10a4      	asrs	r4, r4, #2
 80062da:	2600      	movs	r6, #0
 80062dc:	42a6      	cmp	r6, r4
 80062de:	d109      	bne.n	80062f4 <__libc_init_array+0x24>
 80062e0:	4d0b      	ldr	r5, [pc, #44]	; (8006310 <__libc_init_array+0x40>)
 80062e2:	4c0c      	ldr	r4, [pc, #48]	; (8006314 <__libc_init_array+0x44>)
 80062e4:	f000 f828 	bl	8006338 <_init>
 80062e8:	1b64      	subs	r4, r4, r5
 80062ea:	10a4      	asrs	r4, r4, #2
 80062ec:	2600      	movs	r6, #0
 80062ee:	42a6      	cmp	r6, r4
 80062f0:	d105      	bne.n	80062fe <__libc_init_array+0x2e>
 80062f2:	bd70      	pop	{r4, r5, r6, pc}
 80062f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80062f8:	4798      	blx	r3
 80062fa:	3601      	adds	r6, #1
 80062fc:	e7ee      	b.n	80062dc <__libc_init_array+0xc>
 80062fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006302:	4798      	blx	r3
 8006304:	3601      	adds	r6, #1
 8006306:	e7f2      	b.n	80062ee <__libc_init_array+0x1e>
 8006308:	0800719c 	.word	0x0800719c
 800630c:	0800719c 	.word	0x0800719c
 8006310:	0800719c 	.word	0x0800719c
 8006314:	080071a0 	.word	0x080071a0

08006318 <__retarget_lock_acquire_recursive>:
 8006318:	4770      	bx	lr

0800631a <__retarget_lock_release_recursive>:
 800631a:	4770      	bx	lr

0800631c <memcpy>:
 800631c:	440a      	add	r2, r1
 800631e:	4291      	cmp	r1, r2
 8006320:	f100 33ff 	add.w	r3, r0, #4294967295
 8006324:	d100      	bne.n	8006328 <memcpy+0xc>
 8006326:	4770      	bx	lr
 8006328:	b510      	push	{r4, lr}
 800632a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800632e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006332:	4291      	cmp	r1, r2
 8006334:	d1f9      	bne.n	800632a <memcpy+0xe>
 8006336:	bd10      	pop	{r4, pc}

08006338 <_init>:
 8006338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633a:	bf00      	nop
 800633c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633e:	bc08      	pop	{r3}
 8006340:	469e      	mov	lr, r3
 8006342:	4770      	bx	lr

08006344 <_fini>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	bf00      	nop
 8006348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634a:	bc08      	pop	{r3}
 800634c:	469e      	mov	lr, r3
 800634e:	4770      	bx	lr
